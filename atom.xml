<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://skytotwo.github.io/</id>
    <title>Totoro の Home</title>
    <updated>2019-10-31T09:02:47.896Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://skytotwo.github.io/"/>
    <link rel="self" href="https://skytotwo.github.io//atom.xml"/>
    <subtitle>空杯心态，每天进步</subtitle>
    <logo>https://skytotwo.github.io//images/avatar.png</logo>
    <icon>https://skytotwo.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Totoro の Home</rights>
    <entry>
        <title type="html"><![CDATA[腾讯云开发者专属云服务器购买详解：1核4G2M带宽、398元/3年]]></title>
        <id>https://skytotwo.github.io//post/tencent-dev</id>
        <link href="https://skytotwo.github.io//post/tencent-dev">
        </link>
        <updated>2019-10-31T08:18:01.000Z</updated>
        <summary type="html"><![CDATA[<p>国内网络巨头腾讯公司旗下的腾讯云计算服务目前有个活动可能被当前各大商家的2019年双11促销活动给埋没了，其实本文当中要给大家介绍的腾讯云“云+开发者”专属云服务器促销力度还非常大，1核4G、2M带宽、398元/3年。虽然参与此次活动有一定的小门槛，需要新用户、而且需要完成一点点小任务，但是基本上都可以撸到，要求不是特比高，有兴趣撸的可以仔细看看此文章。</p>
]]></summary>
        <content type="html"><![CDATA[<p>国内网络巨头腾讯公司旗下的腾讯云计算服务目前有个活动可能被当前各大商家的2019年双11促销活动给埋没了，其实本文当中要给大家介绍的腾讯云“云+开发者”专属云服务器促销力度还非常大，1核4G、2M带宽、398元/3年。虽然参与此次活动有一定的小门槛，需要新用户、而且需要完成一点点小任务，但是基本上都可以撸到，要求不是特比高，有兴趣撸的可以仔细看看此文章。</p>
<!-- more -->
<h3 id="一-腾讯云活动页面"><strong>一、腾讯云活动页面</strong></h3>
<p><a href="http://cloud.tencent.com/act/developer?sk=32a71e6b7067f20e3e6319eb09d25792">点击这里直达腾讯云“云+开发者”活动页面</a></p>
<h3 id="二-活动详情及参与"><strong>二、活动详情及参与</strong></h3>
<p>1、腾讯云开发者专属云服务器购买资格认证。首先找到如下图位置，点击红框内的“开始认证”进行答题，一共五道题目。大家通过百度搜答案吧，难度不到，比之前阿里云的30道题目还要视频认证的那个活动容易多了。不过需要注意的是必须是新用户才能采用购买“开发者专属云服务器”，老用户即使认证了也没有用。<strong>但是这里有个取巧的地方，一个身份证可以认证3个账户，也就是说老用户可以用身份证再认证一个新账号，这个就成了新用户了，可以参与这个活动，但是不能认证超过3个账户哦！</strong></p>
<figure data-type="image" tabindex="1"><img src="https://picture.totoro.site/images/2019/10/31/QQ20191031165326.png" alt="QQ20191031165326.png"></figure>
<p>完成认证后找到下图“开发者专属云服务器”配置介绍的图片位置，点击“立即购买”先购入云服务器。</p>
<p>2、然后给大家介绍下开发者专属云服务器配置怎么样。如下图一个可以看得更直观。默认配置是1核2G内存、1Mbps带宽的上海节点云服务器，购买后可以参加免费提升2G内存、免费提升1M带宽、免费续费一年的活动，同时需要需要域名还可以以23元的价格购入一个.com域名。价格相对比较便宜的国内云服务器产品了，等于1核4G内存、2M带宽的腾讯云服务器只需398元/3年，个人建议大家不要选择购买1年,购买2年后想办法免费续费一年更划算。</p>
<figure data-type="image" tabindex="2"><img src="https://picture.totoro.site/images/2019/10/31/11111.png" alt="11111.png"></figure>
<p>3、云服务器购买后，我们就开始做任务了。任务一个一个来，首先是“免费领取2G内存”。完成四个中的一个任务即可免费领取2G内存。</p>
<figure data-type="image" tabindex="3"><img src="https://picture.totoro.site/images/2019/10/31/QQ20191031165116.png" alt="QQ20191031165116.png"></figure>
<p>大家选择一个相对比较容易的任务进行即可。并且是有教程的。点击任务进去，查看“实验手册”即可。</p>
<figure data-type="image" tabindex="4"><img src="https://picture.totoro.site/images/2019/10/31/QQ20191031165840.png" alt="QQ20191031165840.png"></figure>
<p>4、接下来完成“Web业务验证任务”。在购买的云服务器上安装个WEB环境并绑定域名，然后填写域名验证即可。装web环境其实可以在腾讯开发者实验室找个静态页面的实验，nginx加个html就好，找个域名解析一下就行。</p>
<figure data-type="image" tabindex="5"><img src="https://picture.totoro.site/images/2019/10/31/QQ20191031165130.png" alt="QQ20191031165130.png"></figure>
<p>5、最后是免费续费最高1年时长。这个稍微有点难度，需要用自己的链接邀请好友购买，最少购买10天的时间，一共邀请四个人才能领取1年的续费时间。这个大家获取自己的邀请链接可以到一些主机论坛发布，招募参与者。</p>
<figure data-type="image" tabindex="6"><img src="https://picture.totoro.site/images/2019/10/31/QQ20191031165139.png" alt="QQ20191031165139.png"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dropbox使用mklink同步任意文件夹]]></title>
        <id>https://skytotwo.github.io//post/dropbox-mklink</id>
        <link href="https://skytotwo.github.io//post/dropbox-mklink">
        </link>
        <updated>2019-10-26T02:18:21.000Z</updated>
        <summary type="html"><![CDATA[<p>Dropbox 是个非常好的网络服务，我也不知道该怎么形容它。它像是一个网盘，而又不全是，它更像是帮你备份本地数据的一个软件。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Dropbox 是个非常好的网络服务，我也不知道该怎么形容它。它像是一个网盘，而又不全是，它更像是帮你备份本地数据的一个软件。</p>
<!-- more -->
<p>总的来说，这个软件是 Windows/Mac/Linux 通用的，可以和你的资源管理器无缝接合（连文件夹图标都是随系统变化的），如果按照默认设置的话，它会在你的电脑里生成一个 My Dropbox 文件夹，这是一个普通的本地文件夹，但它的神奇之处就是在后台的 Dropbox 程序会一直监视着这个文件夹，当你对这个文件夹做了改动的时候，它会实时同步到网络上，并且有 MD5 识别，这意味着如果你在文件夹里放了一个300多M的OS镜像，很有可能只要1秒钟的时间，这个镜像就被同步上去了——因为Dropbox计算了你的文件的MD5值，发现服务器上早就有相同的文件了，所以瞬间就同步完成了。</p>
<p>这个服务有什么实际作用呢？我觉得它还是非常适合上班族的。在单位里一台电脑，在家里一台电脑，很多上班族都是通过U盘或电子邮件什么的来同步数据的吧？搞不好下班前忘了同步，回家还要懊恼一阵子。有了 Dropbox 就不是问题了。你管你写你的论文、做你的报表，写完保存就行了，然后关机。到了家里打开电脑，一进入系统，你会发现你在单位里写的东西已经躺在硬盘里了，完全不需要你动脑筋。</p>
<p>要是别人的电脑上没装Dropbox怎么办呢？直接访问它的官方网站www.dropbox.com，然后登录就可以了，你将看到一模一样的目录，支持单文件下载和整个文件夹打包下载，非常方便。</p>
<p>在网页上，你可以看到你在几台电脑上登录过 Dropbox，你给那些电脑起的名字是什么，电脑的操作是什么，你当然也可以选择Unlink这些电脑。</p>
<p>Dropbox 还有两个值得称道的功能，一个是版本控制，还有一个是共享。</p>
<p>版本控制是指你对文件做的每一次修改都会被记录下来。比如你今天写了一份文档，后来修改过并保存了，但是你不想这份修改，想回到过去，那很简单，你到 Dropbox 的网站上就可以看到你的文件以前的版本了，点恢复，Dropbox 的进程就会把你原来的版本下载到你的硬盘里，太贴心了。当然，对于一些误删除的文件，也可以用这种方法恢复。</p>
<p>共享功能也是很不错的，这是支持外链的共享，可以把文件的直接链接发给你的好友让他们下载。不过需要注意的是，Dropbox 不希望你把这个链接大肆传播，它只是希望你把这个链接给有限的几个人下载。如果你违背这一条，把 Dropbox 当下载站的话，你的账户会被封掉……（不过如果是初犯，找客服说一下，人家还是会原谅你的）</p>
<p>下面说说 mklink 命令。</p>
<p>Dropbox 好是好，可是它只能同步 My Dropbox 这一个文件夹，这一点比较不爽。我想同步我硬盘里的一些工具软件和照片，难道要把它们都复制到 My Dropbox 目录下面吗？似乎的确是这样的。但是我还是试验出了变通的方法。</p>
<p>用到的命令是 mklink。这是 Windows Vista及以上的系统里自带的一个命令，适用于 NTFS 文件系统，可以用来创建 symbolic link，经过我的试验，这个 symbolic link 对于一般的程序是来说它就等于原文件夹，只有人类和Windows内部才能分辨出这是一个 symbolic link 而不是”真身”。</p>
<p>怎么创建呢？我下面说一下我的实例。</p>
<p>我在 D 分区下有一个叫 Tools 的文件夹，我的 My Dropbox 文件夹也在 D 分区根目录下，我想把 Tools 同步上去，可是不想把整个文件夹复制进去。那可以在 cmd 里输入这样的命令：</p>
<pre><code class="language-shell"> mklink /d &quot;d:\my dropbox\Tools&quot; d:\tools 。
</code></pre>
<p>这样就在 My Dropbox 目录下创建了一个 symbolic link，Dropbox 是分辨不出 symbolic link 与真正的文件夹之间的区别的，于是它以为你对文件夹有改动了，就开始同步你的内容了，过一会儿，你就发现你的 Tools 已经同步上去了，而实际上，你的硬盘里 Tools 文件夹根本就没有挪动地方。</p>
<p>我还用这个命令把我U盘里的Software文件夹也同步上去了： mklink /d &quot;d:\my dropbox\Software&quot; j:\software 。同步完后就算U盘拔掉也没事。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[用自签名SSL证书配合 CloudFlare 免费SSL构建全站HTTPS加密]]></title>
        <id>https://skytotwo.github.io//post/diy-ssl-cloudflare</id>
        <link href="https://skytotwo.github.io//post/diy-ssl-cloudflare">
        </link>
        <updated>2019-10-26T01:47:48.000Z</updated>
        <summary type="html"><![CDATA[<p>CloudFlare有免费的SSL证书，如果仅仅是在CloudFlare后台中开启它的话，并不能做到全站加密，只能开启Flexible模式，而不是Full模式。</p>
]]></summary>
        <content type="html"><![CDATA[<p>CloudFlare有免费的SSL证书，如果仅仅是在CloudFlare后台中开启它的话，并不能做到全站加密，只能开启Flexible模式，而不是Full模式。</p>
<!-- more -->
<p>进入CloudFlare后台-&gt;SSL/TLS，可以看到第一项就是免费提供的SSL。这里有4种模式可选：Off（关闭SSL）、Flexible（视情况而定）、Full（全部加密，需要在服务器上部署证书，但CloudFlare不会检查证书的有效性）、Full(Strict)（严格模式，也就是全部加密，而且CloudFlare会检查服务器上的证书是否有效）。<br>
<img src="https://picture.totoro.site/images/2019/10/26/ssl.png" alt="ssl.png"></p>
<p>在这里，我们的目标是开启Full模式，实现方式是：首先自签一个泛域名的证书，然后在Nginx中设置通过HTTPS访问网站，最后到CloudFlare中设置一下SSL模式。</p>
<p>当然，如果你是个强迫症患者，非要开启Full(Strict)模式，也是可以的，但服务器上就不能部署自签名的证书了，而需要一个有效机构颁发的证书，例如letsencrypt的证书。然而缺点显而易见：需要定期续期。使用自签名证书就不存在这个问题了，你想签多长时间的有效期就可以签多长时间，更换服务器时，也仅需要把证书文件拷到新服务器上。</p>
<h3 id="准备工作"><strong>准备工作</strong></h3>
<p>第一步，当然是确保你的DNS是CloudFlare的！</p>
<p>第二步，安装签发证书工具：OpenSSL</p>
<p>dpkg系：</p>
<pre><code class="language-shell">apt-get install openssl
</code></pre>
<p>rhel系：</p>
<pre><code class="language-shell">yum install openssl
</code></pre>
<h3 id="签发证书"><strong>签发证书</strong></h3>
<p>首先建立一个制作、存放证书的目录：</p>
<pre><code class="language-shell">mkdir certificate
</code></pre>
<p>进入该目录，然后签发一个根域名的CA证书，第一步创建一个私钥ca.key：</p>
<pre><code class="language-shell">openssl genrsa -des3 -out ca.key 2048
</code></pre>
<p>第二步，生成CA根证书（公钥）：</p>
<pre><code class="language-shell">openssl req -new -x509 -days 7305 -key ca.key -out ca.crt
</code></pre>
<p>命令中，-days后面的7305是指证书的有效期，以天为单位，这里设置成了20年，手动滑稽。<br>
执行命令后会让你填一堆地区、组织什么的东西，随便填就好，但注意期间会让你填写common name，也就是域名，这里填入的是你的根域名，例如eaimty.com。最后，你就得到了一个根域的CA证书。</p>
<p>之后生成一个给泛域名用的私钥：</p>
<pre><code class="language-shell">openssl genrsa -des3 -out yourdomain.com.pem 1024
</code></pre>
<p>解密私钥：</p>
<pre><code class="language-shell">openssl rsa -in yourdomain.com.pem -out yourdomain.com.key
</code></pre>
<p>生成签名请求：</p>
<pre><code class="language-shell">openssl req -new -key yourdomain.com.pem -out yourdomain.com.csr
</code></pre>
<p>这一步中common name要填入泛域名，如*.eaimty.com，这样生成的证书可以供所有子域使用。</p>
<p>下一步还不能直接执行签名，否则会报错，要先修改一下openssl的配置文件：</p>
<pre><code class="language-shell">vi /etc/pki/tls/openssl.cnf
</code></pre>
<p>找到其中的dir = ，把值改成./ca。</p>
<p>然后在你签发证书的工作目录中：</p>
<pre><code class="language-shell">mkdir -p ca/newcerts

touch ca/index.txt

touch ca/serial

echo &quot;01&quot; &gt; ca/serial
</code></pre>
<p>这样就可以正常执行签名了：</p>
<pre><code class="language-shell">openssl ca -policy policy_anything -days 7305 -cert ca.crt -keyfile ca.key -in yourdomain.com.csr -out yourdomain.com.crt
</code></pre>
<p>这一步中的参数和上一步中的意义相同。<br>
最后你会得到一个yourdomain.com.crt文件，把ca.crt中的内容粘贴到yourdomain.com.crt的最后，证书就签发完成了。</p>
<p>准备好yourdomain.com.crt（网站证书）和yourdomain.com.key（网站私钥），开始配置Nginx！</p>
<h3 id="配置nginx"><strong>配置Nginx</strong></h3>
<p>这一步很简单，找到你的网站（所签发泛域名的所有子域名都可以用）的Nginx配置文件（通常是/etc/nginx/conf.d/下的XXX.conf），<br>
修改server{}段listen 443 ssl;，添加ssl_certificate /path/to/yourdomain.com.crt;和ssl_certificate_key /path/to/yourdomain.com.key;两行。</p>
<p>测试Nginx的配置文件是否有错：</p>
<pre><code class="language-shell">nginx -t
</code></pre>
<p>注意看是否报错。<br>
重启Nginx：</p>
<p>systemd发行版：# systemctl restart nginx<br>
init.d发行版：# service nginx restart</p>
<p>如果不确定是哪种发行版的话两个命令都试一试。</p>
<h3 id="设置cloudflare"><strong>设置CloudFlare</strong></h3>
<p>进入CloudFlare管理界面，将Crypto-&gt;SSL改为“Full”。</p>
<p>现在通过浏览器进入https://你的网站/，你就会发现小绿锁出现了！就说明我们成功了！</p>
<p>最后设置一下http自动跳转至https，全站SSL就实现了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux各发行版安装docker教程]]></title>
        <id>https://skytotwo.github.io//post/linux-docker-setup</id>
        <link href="https://skytotwo.github.io//post/linux-docker-setup">
        </link>
        <updated>2019-09-02T01:35:46.000Z</updated>
        <summary type="html"><![CDATA[<p>docker是当下十分流行的容器，因为其部署简单而使用广泛，不同的linux发行版安装docker的步骤操作是不一样的。</p>
]]></summary>
        <content type="html"><![CDATA[<p>docker是当下十分流行的容器，因为其部署简单而使用广泛，不同的linux发行版安装docker的步骤操作是不一样的。</p>
<!-- more -->
<h3 id="centos"><strong>Centos</strong></h3>
<p>1.先移除旧版本docker文件</p>
<pre><code class="language-shell">yum remove docker  
                  docker-client 
                  docker-client-latest 
                  docker-common 
                  docker-latest 
                  docker-latest-logrotate 
                  docker-logrotate 
                  docker-engine
</code></pre>
<p>2.安装必要依赖</p>
<pre><code class="language-shell">yum install -y yum-utils 
  device-mapper-persistent-data 
  lvm2
</code></pre>
<p>3.设置docker稳定版文件</p>
<pre><code class="language-shell">yum-config-manager 
    --add-repo 
    https://download.docker.com/linux/centos/docker-ce.repo
</code></pre>
<p>4.安装docker社区版</p>
<pre><code class="language-shell">yum install docker-ce docker-ce-cli containerd.io
</code></pre>
<p>5.启动docker</p>
<pre><code class="language-shell">systemctl start docker
</code></pre>
<p>6.测试</p>
<pre><code class="language-shell">docker run hello-world
</code></pre>
<h3 id="debian"><strong>Debian</strong></h3>
<p>1.先移除旧版本docker文件</p>
<pre><code class="language-shell">apt-get remove docker docker-engine docker.io containerd runc
</code></pre>
<p>2.更新文件</p>
<pre><code class="language-shell">apt-get update
</code></pre>
<p>3.安装必要依赖</p>
<pre><code class="language-shell">apt-get install 
    apt-transport-https 
    ca-certificates 
    curl 
    gnupg2 
    software-properties-common
</code></pre>
<p>4.设置docker稳定版文件</p>
<pre><code class="language-shell">add-apt-repository 
   &quot;deb [arch=amd64] https://download.docker.com/linux/debian 
   $(lsb_release -cs) 
   stable&quot;
</code></pre>
<p>5.安装docker社区版</p>
<pre><code class="language-shell">apt-get install docker-ce docker-ce-cli containerd.io
</code></pre>
<p>6.测试</p>
<pre><code class="language-shell">docker run hello-world
</code></pre>
<h3 id="ubantu"><strong>Ubantu</strong></h3>
<p>1.先移除旧版本docker文件</p>
<pre><code class="language-shell">apt-get remove docker docker-engine docker.io containerd runc
</code></pre>
<p>2.更新文件</p>
<pre><code class="language-shell">apt-get update
</code></pre>
<p>3.安装必要依赖</p>
<pre><code class="language-shell">apt-get install 
    apt-transport-https 
    ca-certificates 
    curl 
    gnupg-agent 
    software-properties-common
</code></pre>
<p>4.设置docker稳定版文件</p>
<pre><code class="language-shell">add-apt-repository 
   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu 
   $(lsb_release -cs) 
   stable&quot;
</code></pre>
<p>5.安装docker社区版</p>
<pre><code class="language-shell">apt-get install docker-ce docker-ce-cli containerd.io
</code></pre>
<p>6.测试</p>
<pre><code class="language-shell">docker run hello-world
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VPS主机性能和速度测试方法，各种测试工具]]></title>
        <id>https://skytotwo.github.io//post/vps-test</id>
        <link href="https://skytotwo.github.io//post/vps-test">
        </link>
        <updated>2019-09-01T09:03:37.000Z</updated>
        <summary type="html"><![CDATA[<p>这年头VPS主机太多了，好多“二手”VPS开始横行其道，让人真假莫辨，想要购买某一个VPS主机，一般是先要看看这家的VPS主机的评测数据。之前分享VPS主机时都会给出VPS的性能与速度测试报告，这次我就来专门整理一下相关的测试工具。</p>
]]></summary>
        <content type="html"><![CDATA[<p>这年头VPS主机太多了，好多“二手”VPS开始横行其道，让人真假莫辨，想要购买某一个VPS主机，一般是先要看看这家的VPS主机的评测数据。之前分享VPS主机时都会给出VPS的性能与速度测试报告，这次我就来专门整理一下相关的测试工具。</p>
 <!-- more --> 
<p>一来给自己做一个备忘录，以后测试VPS就不用满大街地找百度要命令了，二来给没有用过的朋友一点帮助，这些工具都是好多站长朋友通用的，自己购买的VPS主机到底值不值这个价格，用这几个工具一测试便知，而且操作简单，只需要几个命令即可完成。</p>
<p>需要提醒的是，关于IO读写速度的测试，根据以往的经验，像谷歌云服务器、亚马逊服务器等，IO读写速度都比较低，而SSD在IO方面表现出色。另外，国外的VPS主机的速度很大程度上取决于线路的好坏，并且晚上和白天的测试速度会差别比较大。VPS主机性能和速度测试方法。</p>
<h3 id="常用检测脚本汇总"><strong>常用检测脚本汇总</strong></h3>
<p>为方便使用，我在这里汇总一下用于VPS各类检测的脚本，有关脚本的详细使用及说明可参阅下文的内容。</p>
<p>1、一键测试服务器到国内的速度脚本Superspeed.sh ：</p>
<pre><code class="language-shell">wget https://raw.githubusercontent.com/oooldking/script/master/superspeed.sh
chmod +x superspeed.sh
./superspeed.sh
</code></pre>
<p>2、一键检测VPS的CPU、内存、负载、IO读写、机房带宽等脚本：bench.sh</p>
<pre><code class="language-shell">命令1：
wget -qO- bench.sh | bash
或者
curl -Lso- bench.sh | bash

命令2：
wget -qO- 86.re/bench.sh | bash
或者
curl -so- 86.re/bench.sh | bash
</code></pre>
<p>备注：<br>
bench.sh 既是脚本名，同时又是域名。如果以上失效，请使用以下地址下载再执行脚本：<br>
下载地址：<br>
https://github.com/teddysun/across/blob/master/bench.sh<br>
3、可以看作bench.sh强化版：SuperBench.sh</p>
<p>新增 Virt 检测服务器类型参数。常见 openvz，kvm，独服都能检测出来。同时整合上面的Superspeed.sh一键测试服务器到国内的速度脚本：</p>
<pre><code class="language-shell">wget -qO- https://raw.githubusercontent.com/oooldking/script/master/superbench.sh | bash
</code></pre>
<p>或者</p>
<pre><code class="language-shell">curl -Lso- https://raw.githubusercontent.com/oooldking/script/master/superbench.sh | bash
</code></pre>
<p>4、一键带宽检测工具：speedtest-cli</p>
<p>安装命令：</p>
<pre><code class="language-shell">sudo apt-get update
apt-get install python-pip
sudo pip install speedtest-cli

#CentOS
yum update
yum -y install epel-release
yum install python-pip
pip install speedtest-cli
使用方法：

speedtest-cli
#后面也可以接以下参数：
-h, --help show this help message and exit 
--share 分享你的网速，该命令会在speedtest网站上生成网速测试结果的图片。 
--simple Suppress verbose output, only show basic information 
--list 根据距离显示speedtest.net的测试服务器列表。 
--server=SERVER 指定列表中id的服务器来做测试。 
--mini=MINI URL of the Speedtest Mini server 
--source=SOURCE Source ip address to bind to 
--version Show the version number and exit
</code></pre>
<p>5、VPS性能综合跑分工具：unixbench</p>
<p>命令如下：</p>
<pre><code class="language-shell">wget --no-check-certificate https://github.com/teddysun/across/raw/master/unixbench.sh
chmod +x unixbench.sh
./unixbench.sh
</code></pre>
<p>6、一键测试回程Ping值工具：mPing</p>
<pre><code class="language-shell">wget https://raw.githubusercontent.com/helloxz/mping/master/mping.sh
bash mping.sh
</code></pre>
<p>7、Serverreview-benchmark综合评测工具</p>
<p>这是一个老外写的VPS主机综合评测工具，主要评测的项目有VPS主机磁盘IO、内存读写、CPU性能以及Benchmark性能，还有美国、欧洲、亚洲等不同节点的下载速度。主页：https://github.com/sayem314/serverreview-benchmark</p>
<p>脚本使用使用方法</p>
<pre><code class="language-shell">#简略版
yum install curl -y
curl -LsO git.io/bench.sh; chmod +x bench.sh &amp;&amp; ./bench.sh -a share
#完整版
yum install curl -y
curl -LsO git.io/bench.sh; chmod +x bench.sh &amp;&amp; ./bench.sh -a share 
</code></pre>
<p>8、Speedtest一键包 可用于检测VPS网速带宽 vps测速<br>
使用如下命令获取最新版本：</p>
<pre><code class="language-shell">wget https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py
赋权：

chmod +x speedtest.py
使用如下命令来运行测试脚本：

./speedtest.py
</code></pre>
<h3 id="一-vps速度测试工具"><strong>一、VPS速度测试工具</strong></h3>
<p>在线测试工具。使用在线测试工具，可以方便得到服务器的响应时间，这一招对于国外的VPS特别有效果。以下是搜集整理的实用在线网站速度测试工具网站：</p>
<p>http://ping.chinaz.com/</p>
<p>http://www.ipip.net/ping.php</p>
<p>https://www.17ce.com/</p>
<p>http://www.webkaka.com/</p>
<p>http://ce.cloud.360.cn/</p>
<p>这几个在线测速工具各有各的优缺点，推荐使用ipip.net测试服务器IP和路由追踪，用17ce.com测试网页加载速度，用ping.chinaz.com用国内不同地方的Ping值。<br>
<img src="http://picture.totoro.site/images/2019/09/01/20190501113404_937.gif" alt="20190501113404_937.gif"></p>
<p>本地测试软件。这里推荐使用WinMTR，这是一款方便易用的路由跟踪工具。该软件可以帮助用户直接查看各个节点的响应时间及丢包率，非常适合windows下客户做路由追踪及PING进行测试。</p>
<p>下载地址：https://www.ucblog.net/wzfou/WinMTR-CN-IP.zip</p>
<p>项目主页：https://github.com/oott123/WinMTR</p>
<p>带地图版：https://cdn.ipip.net/17mon/besttrace.exe</p>
<p>启用WinMTR，点击可以更新IP地址。</p>
<figure data-type="image" tabindex="1"><img src="http://picture.totoro.site/images/2019/09/01/20190501113458_204.gif" alt="20190501113458_204.gif"></figure>
<p>输入你想要追踪的域名或者服务器IP，接着你就可以看到数据包经过的节点还有丢包等情况，同时支持导出文本。<br>
<img src="http://picture.totoro.site/images/2019/09/01/20190501113525_361.gif" alt="20190501113525_361.gif"><br>
相关的参数说明如下：</p>
<pre><code class="language-shell">Hostname：到目的服务器要经过的每个主机IP或名称
Nr：经过节点的数量；以上图百度为例子：一共要经过10个节点，其中第一个是出口的路由器
Loss%：ping 数据包回复失败的百分比；藉此判断，那个节点（线路）出现故障，是服务器所在机房还是国际路由干路
Sent：已传送的数据包数量
Recv：成功接收的数据包数量
Best：回应时间的最小值
Avrg：平均回应时间
Worst：回应时间的最大值
Last：最后一个数据包的回应时间
</code></pre>
<h3 id="二-vps性能测试工具"><strong>二、VPS性能测试工具</strong></h3>
<p>手动命令测试磁盘IO：</p>
<pre><code class="language-shell">dd if=/dev/zero of=test bs=64k count=4k oflag=dsync 
</code></pre>
<p>手动命令测试VPS网络：</p>
<pre><code class="language-shell">wget http://cachefly.cachefly.net/100mb.test
</code></pre>
<p>一键检测脚本。这里有一个一键检测VPS的CPU、内存、负载、IO读写、机房带宽等。</p>
<pre><code class="language-shell">命令1：
wget -qO- bench.sh | bash
或者
curl -Lso- bench.sh | bash

命令2：
wget -qO- 86.re/bench.sh | bash
或者
curl -so- 86.re/bench.sh | bash
</code></pre>
<p>备注：<br>
bench.sh 既是脚本名，同时又是域名。如果以上失效，请使用以下地址下载再执行脚本：<br>
下载地址：<br>
https://github.com/teddysun/across/blob/master/bench.sh</p>
<p>VPS性能综合跑分工具。UnixBench是一个类unix系（Unix，BSD，Linux）统下的性能测试工具，一个开源工具，被广泛用与测试linux系统主机的性能。Unixbench的主要测试项目有：系统调用、读写、进程、图形化测试、2D、3D、管道、运算、C库等系统基准性能提供测试数据。命令如下：</p>
<pre><code class="language-shell">wget --no-check-certificate https://github.com/teddysun/across/raw/master/unixbench.sh
chmod +x unixbench.sh
./unixbench.sh
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[超级一键加速脚本，bbr 原版/魔改/plus/锐速 四合一]]></title>
        <id>https://skytotwo.github.io//post/bbr-setup</id>
        <link href="https://skytotwo.github.io//post/bbr-setup">
        </link>
        <updated>2019-09-01T08:58:10.000Z</updated>
        <summary type="html"><![CDATA[<p>很多时候，我们为了给VPS加速，会选择不同的方式，比如BBR、锐速等，但单独BBR目前就有普通版、魔改版和plus版，加上锐速，无疑需要很多的脚本，这样在安装上也非常的不方便，而最近，loc论坛的网友又发挥了超人的实力，整出了一个集合BBR、BBR魔改、BBR plus、锐速四合一的脚本，给我们安装提供了极大的方便。</p>
]]></summary>
        <content type="html"><![CDATA[<p>很多时候，我们为了给VPS加速，会选择不同的方式，比如BBR、锐速等，但单独BBR目前就有普通版、魔改版和plus版，加上锐速，无疑需要很多的脚本，这样在安装上也非常的不方便，而最近，loc论坛的网友又发挥了超人的实力，整出了一个集合BBR、BBR魔改、BBR plus、锐速四合一的脚本，给我们安装提供了极大的方便。</p>
<!-- more --> 
<p>项目地址：<br>
<a href="https://github.com/skytotwo/Linux-NetSpeed" title="https://github.com/skytotwo/Linux-NetSpeed">https://github.com/skytotwo/Linux-NetSpeed</a></p>
<h4 id="简介"><strong>简介：</strong></h4>
<p>本脚本支持KVM架构的VPS，不支持OpenVZ，kvm机型 Centos 7, Debian 8/9, Ubuntu 16/18均测试通过<br>
<img src="http://picture.totoro.site/images/2019/09/01/20190501112405_926.png" alt="20190501112405_926.png"><br>
安装命令：</p>
<pre><code class="language-shell">wget &quot;https://github.com/skytotwo/Linux-NetSpeed/raw/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh
</code></pre>
<p>部分如果提示连接不上github。可以先安装</p>
<pre><code class="language-shell">yum install net-tools -y  或者 apt-get install net-tools -y
</code></pre>
<p>如果没有wget，比如搬瓦工vps，可以先安装wget</p>
<pre><code class="language-shell">yum -y install wget
</code></pre>
<p>执行如何提示证书错误的话</p>
<pre><code class="language-shell">yum -y install ca-certificates
</code></pre>
<p>或者</p>
<pre><code class="language-shell">apt-get -y install ca-certificates
</code></pre>
<h4 id="说明"><strong>说明：</strong></h4>
<ol>
<li>
<p>先在[1 - 3]切换内核（第一次显示为bbr内核也要切换一遍），重启<br>
出现这个选no<br>
<img src="http://picture.totoro.site/images/2019/09/01/20190501112743_808.png" alt="20190501112743_808.png"></p>
</li>
<li>
<p>重启后不用再下载脚本，直接 ./tcp.sh ，在[4 - 8]中选你要开的加速</p>
</li>
</ol>
<pre><code class="language-shell">&quot;1. 安装 BBR/BBR魔改版内核&quot;        对应4,5,6（原版，魔改，暴力魔改）
&quot;2. 安装 BBRplus版内核 &quot;                对应7（plus）
&quot;3. 安装 Lotserver(锐速)内核&quot;        对应8（锐速）
</code></pre>
<ol start="3">
<li>开启后再 ./tcp.sh  ， 显示开启成功则启动成功，你也可以自己手动确认</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[微信支付统一下单失败，返回金额invalid total_fee]]></title>
        <id>https://skytotwo.github.io//post/wechat-invalid-total_fee</id>
        <link href="https://skytotwo.github.io//post/wechat-invalid-total_fee">
        </link>
        <updated>2019-09-01T08:41:55.000Z</updated>
        <summary type="html"><![CDATA[<p>这里是因为微信支付金额是以分为单位的，而支付宝是以元为单位的，这是两者的区别。在下单部分，需要将金额做一下处理，将元转化成分，下面是python的实现：</p>
]]></summary>
        <content type="html"><![CDATA[<p>这里是因为微信支付金额是以分为单位的，而支付宝是以元为单位的，这是两者的区别。在下单部分，需要将金额做一下处理，将元转化成分，下面是python的实现：</p>
<!-- more -->
<pre><code class="language-python">def trans_yuan_to_cent(total_fee):
    &quot;&quot;&quot;微信支付时，需要将元转为分&quot;&quot;&quot;
    total_fee = str(total_fee)
    index = total_fee.find('.')
    length = len(total_fee)

    if index == -1:  # 当不存在小数点时候，也就是分，直接乘以100，这里是加两个0
        fee = int(total_fee + '00')
    elif length - index &gt;= 3:  # 当传入金额待两位小数以上的时候
        fee = int(total_fee[0:index+3].replace('.', ''))
    elif length - index == 2:  # 当传入金额待一位小数时候
        fee = int(total_fee[0:index+2].replace('.', '')+'0')
    else:  # 当传入金额带一个小数点时候
        fee = int(total_fee[0:index+1].replace('.', '')+'00')

    return fee
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于服务器端口转发的两种常见方法]]></title>
        <id>https://skytotwo.github.io//post/linux-resend</id>
        <link href="https://skytotwo.github.io//post/linux-resend">
        </link>
        <updated>2019-09-01T08:36:13.000Z</updated>
        <summary type="html"><![CDATA[<p>很多时候，访问国外服务器时，网络质量是很影响体验的，当我们有一台普通线路的国外服务器，日常使用没有太大要求其实也能满足自身需要，但是如果想要让体验更佳，那就可以尝试使用服务器端口转发。</p>
]]></summary>
        <content type="html"><![CDATA[<p>很多时候，访问国外服务器时，网络质量是很影响体验的，当我们有一台普通线路的国外服务器，日常使用没有太大要求其实也能满足自身需要，但是如果想要让体验更佳，那就可以尝试使用服务器端口转发。</p>
 <!-- more -->
<p>端口转发的原理是用一台国内的服务器来做跳转，利用国内服务器优质的线路，使得访问国外服务器速度更快更稳定。常见的转发有rinetd、Haproxy、iptables、socat，前面2种只能转发TCP，后面TCP/UDP都可以转发，这里介绍iptables、socat，下面来看看两种转发方式。</p>
<h3 id="一-socat转发"><strong>一、socat转发</strong></h3>
<p>一键脚本<br>
脚本说明：脚本默认开启UDP、TCP转发，带开机自启功能，且一次只能转发单个端口，如果想转发多个端口请重复运行本脚本</p>
<p>使用root运行以下命令：</p>
<pre><code class="language-shell">wget https://www.moerats.com/usr/shell/socat.sh &amp;&amp; bash socat.sh
</code></pre>
<p>按要求输入以下信息：</p>
<p>如果你要用本地服务器的3333端口转发IP为1.1.1.1服务器的6666端口，那就依次填入指定参数。<br>
请输入本地端口:3333<br>
请输入远程端口:6666<br>
请输入远程IP:1.1.1.1<br>
输入后直到配置完成</p>
<h3 id="二-iptables转发"><strong>二、iptables转发</strong></h3>
<h4 id="21一键脚本"><strong>2.1一键脚本</strong></h4>
<pre><code class="language-shell">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubiBackup/skytotwo/master/iptables-pf.sh &amp;&amp; chmod +x iptables-pf.sh &amp;&amp; bash iptables-pf.sh
</code></pre>
<p>下载并运行脚本后，先选择 1. 安装 iptables ，会检测是否安装 iptables 同时也会进行 iptables 防火墙开机启动加载等配置。</p>
<p>使用方法</p>
<pre><code class="language-shell">./iptables-pf.sh
</code></pre>
<p>运行脚本后，会显示菜单：</p>
<pre><code class="language-shell"> iptables 端口转发一键管理脚本 [vx.x.x]
 -- Toyo | doub.io/wlzy-20 --
 
 0. 升级脚本
————————————
 1. 安装 iptables
 2. 清空 iptables 端口转发
————————————
 3. 查看 iptables 端口转发
 4. 添加 iptables 端口转发
 5. 删除 iptables 端口转发
————————————
注意：初次使用前请请务必执行 1. 安装 iptables(不仅仅是安装)
 
 请输入数字 [0-5]:
</code></pre>
<p>选择 4. 添加 iptables 端口转发 后，会提示你依次输入 欲转发IP、欲转发端口、本地监听端口、本地IP、转发类型：</p>
<pre><code class="language-shell">请输入 iptables 欲转发至的 远程端口 [1-65535] (支持端口段 如 2333-6666, 被转发服务器):10000-11000
 
 欲转发端口 : 10000-11000
 
请输入 iptables 欲转发至的 远程IP(被转发服务器):2.2.2.2
 
 欲转发服务器IP : 2.2.2.2
 
请输入 iptables 本地监听端口 [1-65535] (支持端口段 如 2333-6666)
(默认端口: 10000-11000):
 
 本地监听端口 : 10000-11000
 
请输入 本服务器的 公网IP网卡IP(注意是网卡绑定的IP，而不仅仅是公网IP，回车自动检测):
 
 本服务器IP : 1.1.1.1
 
请输入数字 来选择 iptables 转发类型:
 1. TCP
 2. UDP
 3. TCP+UDP
 
(默认: TCP+UDP):
 
——————————————————————————————
 请检查 iptables 端口转发规则配置是否有误 !
 
 本地监听端口 : 10000-11000
 服务器 IP : 2.2.2.2
 
 欲转发的端口 : 10000-11000
 欲转发 IP : 1.1.1.1
 转发类型 : TCP+UDP
——————————————————————————————
</code></pre>
<p>最后会提示你确认配置是否有误，如果没有问题就按任意键继续，启动成功后就会提示：</p>
<pre><code class="language-shell">——————————————————————————————
 iptables 端口转发规则配置完成 !
 
 本地监听端口 : 10000:11000
 服务器 IP : 1.1.1.1
 
 欲转发的端口 : 10000:11000
 欲转发 IP : 2.2.2.2
 转发类型 : TCP+UDP
——————————————————————————————
</code></pre>
<p>选择 3. 查看 iptables 端口转发 后，会显示如下：</p>
<pre><code class="language-shell">当前有 2 个 iptables 端口转发规则。
1. 类型: tcp 监听端口: 10000:20000 转发IP和端口: 2.2.2.2:10000-20000
2. 类型: udp 监听端口: 10000:20000 转发IP和端口: 2.2.2.2:10000-20000
</code></pre>
<p>选择 5. 删除 iptables 端口转发 后，也会显示列表，然后让你选择 要删除的端口转发规则序号。</p>
<p><strong>Shadowsocks客户端说明</strong><br>
假设你的海外服务器(被中转)中搭建的Shadowsocks服务端的IP是 2.2.2.2  ，SS端口是 10000 。</p>
<p>假设中转服务器的IP是 1.1.1.1 ，本地监听端口和SS端口不一致，本地监听端口是 20000 。</p>
<p>那么，你的Shadowsocks客户端，添加Shadowsocks服务器，IP填写 1.1.1.1 ，端口填写 20000 ，其他的 密码/加密方式/协议/混淆等等 全部和原Shadowsocks账号一样！</p>
<p><strong>其他说明</strong><br>
CentOS 7 默认的防火墙是 firewall，要使用本脚本，请先卸载或关闭 firewall 服务器，并安装 iptables 全套软件。</p>
<p>关于国内腾讯云等服务器转发失败解释<br>
国内的很多服务器，例如腾讯云，在VPS网卡上面绑定的都是内网IP，这样的话，如果你用脚本自动检测外网IP，会转发失败，需要在添加转发规则的时候，本服务器IP手动写你的服务器 网卡上面绑定的IP。</p>
<h4 id="22手动添加"><strong>2.2手动添加</strong></h4>
<p>在使用iptables转发流量之前请执行如下命令：</p>
<pre><code class="language-shell">sed -i 's/net.ipv4.ip_forward = 0/net.ipv4.ip_forward = 1/g' /etc/sysctl.conf
sysctl -p
</code></pre>
<p>然后我们清除下所有默认的iptables表：</p>
<pre><code class="language-shell">iptables -F
iptables -t nat -F
service iptables save
</code></pre>
<p>iptables相同端口转发命令：</p>
<pre><code class="language-shell">iptables -t nat -A PREROUTING -p tcp --dport [端口号] -j DNAT --to-destination [目标IP]
iptables -t nat -A PREROUTING -p udp --dport [端口号] -j DNAT --to-destination [目标IP]
iptables -t nat -A POSTROUTING -p tcp -d [目标IP] --dport [端口号] -j SNAT --to-source [中转服务器IP]
iptables -t nat -A POSTROUTING -p udp -d [目标IP] --dport [端口号] -j SNAT --to-source [中转服务器IP]
</code></pre>
<p>不同端口：</p>
<pre><code class="language-shell">iptables -t nat -A PREROUTING -p tcp --dport [源端口号] -j DNAT --to-destination [目标IP:目标端口号]
iptables -t nat -A PREROUTING -p udp --dport [源端口号] -j DNAT --to-destination [目标IP:目标端口号]
iptables -t nat -A POSTROUTING -p tcp -d [目标IP] --dport [目标端口号] -j SNAT --to-source [中转服务器IP]
iptables -t nat -A POSTROUTING -p udp -d [目标IP] --dport [目标端口号] -j SNAT --to-source [中转服务器IP]
</code></pre>
<p><strong>注意：执行完毕后，必须进行保存 请使用 service iptables save 进行保存。</strong></p>
<p>以下是一个实例（这里我们的应用端口为50020~50029，我们使用520022测试转发另外一个IP的6053端口，我们的主IP为：192.168.5.2，转发服务器IP为：1.1.1.1）：</p>
<pre><code class="language-shell">iptables -t nat -A PREROUTING -p tcp --dport 50022 -j DNAT --to-destination 1.1.1.1:6053
iptables -t nat -A PREROUTING -p udp --dport 50022 -j DNAT --to-destination 1.1.1.1:6053
iptables -t nat -A POSTROUTING -p tcp -d 1.1.1.1 --dport 6053 -j SNAT --to-source 192.168.5.2
iptables -t nat -A POSTROUTING -p udp -d 1.1.1.1 --dport 6053 -j SNAT --to-source 192.168.5.2
service iptables save
</code></pre>
<h3 id="三-iptables和socat的优劣"><strong>三、iptables和socat的优劣</strong></h3>
<p>实际体验中iptables会好一点，socat当转发数多了就会炸，推荐使用iptables转发。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一款强大好用的个人图床：chevereto安装教程]]></title>
        <id>https://skytotwo.github.io//post/chevereto-setup</id>
        <link href="https://skytotwo.github.io//post/chevereto-setup">
        </link>
        <updated>2019-09-01T08:27:49.000Z</updated>
        <summary type="html"><![CDATA[<p>说明：chevereto是目前最好的图床之一了。功能也非常强大。其免费版和收费版的区别，在于收费版多了硬盘扩展，社交分享功能和技术支持。硬盘扩展指的是你可以通过sftp等方式把上传的文件储存在其他服务器上。所以个人觉得，这个免费版已经足够使用了。而且chevereto的安装也非常简单，并且支持中文。网上很多教程都写得不是很清楚，这里就发个详细安装教程吧。</p>
]]></summary>
        <content type="html"><![CDATA[<p>说明：chevereto是目前最好的图床之一了。功能也非常强大。其免费版和收费版的区别，在于收费版多了硬盘扩展，社交分享功能和技术支持。硬盘扩展指的是你可以通过sftp等方式把上传的文件储存在其他服务器上。所以个人觉得，这个免费版已经足够使用了。而且chevereto的安装也非常简单，并且支持中文。网上很多教程都写得不是很清楚，这里就发个详细安装教程吧。</p>
 <!-- more --> 
<p>官网：https://chevereto.com/<br>
DEMO：https://demo.chevereto.com/</p>
<p>如下：<br>
<a href="http://picture.totoro.site/image/VWCR"><img src="http://picture.totoro.site/images/2019/04/18/WX20190418-1642542x.png" alt="WX20190418-1642542x.png"></a></p>
<h4 id="安装"><strong>安装</strong></h4>
<p><strong>环境要求：Apache/Nginx、PHP 5.5+、MySQL 5.0+</strong></p>
<h4 id="1-搭建web环境"><strong>1、搭建web环境</strong></h4>
<p>我们可以用lnmp、lamp一键包或者宝塔之类的面板来搭建web环境。<br>
lnmp安装方法可参考：</p>
<pre><code class="language-shell">wget -c http://soft.vpser.net/lnmp/lnmp1.4.tar.gz &amp;&amp; tar zxf lnmp1.4.tar.gz &amp;&amp; cd lnmp1.4 &amp;&amp; ./install.sh lnmp
</code></pre>
<h3 id="2-上传chevereto程序"><strong>2、上传chevereto程序</strong></h3>
<p>搭建好web环境后，添加网站并解析，再上传chevereto程序到网站目录，chevereto下载地址：https://github.com/Chevereto/Chevereto-Free。<br>
这里以lnmp为例，执行命令：</p>
<pre><code class="language-shell">cd /home/wwwroot/
mkdir chevereto
cd chevereto
wget https://github.com/Chevereto/Chevereto-Free/archive/1.0.9.tar.gz
tar zvxf 1.0.9.tar.gz
</code></pre>
<p>赋权限</p>
<p>再执行非常重要的一步：</p>
<pre><code class="language-shell">chown www:www -R /home/wwwroot/chevereto
</code></pre>
<p><strong>创建settings.php文件</strong></p>
<p>在app目录新建settings.php文件并给予可写入权限:</p>
<pre><code class="language-shell">cd /home/wwwroot/chevereto/app
touch settings.php
chmod -R 777 settings.php
</code></pre>
<p><strong>修改nginx配置文件</strong></p>
<p>修改网站配置文件/usr/local/nginx/conf/nginx.conf,在server中添加以下代码:</p>
<pre><code class="language-shell">location / {
try_files $uri $uri/ /index.php?$query_string;
}
</code></pre>
<p>再将程序根路径指向chevereto文件夹：</p>
<pre><code class="language-shell">root /home/wwwroot/chevereto;
</code></pre>
<p>然后重启Nginx，使用命令:</p>
<pre><code class="language-shell">/etc/init.d/nginx restart
#或
lnmp restart
#或
lnmp nginx restart
</code></pre>
<h3 id="3-生成chevereto图床所需的数据库"><strong>3、生成chevereto图床所需的数据库</strong></h3>
<p>将安装lnmp自动生成的default文件夹中phpmyadmin拷贝到chevereto文件夹里</p>
<pre><code class="language-shell">cp -R /home/wwwroot/default/phpmyadmin /home/wwwroot/chevereto
</code></pre>
<p>浏览器访问http://IP/phpmyadmin, 登录。<br>
新增chevereto数据库<br>
新增chevereto用户，并且赋权限</p>
<h3 id="4-开始安装chevereto"><strong>4、开始安装chevereto</strong></h3>
<p>浏览器访问http://IP/<br>
然后开始填写数据库信息：<br>
<img src="http://picture.totoro.site/images/2019/04/18/chevereto03.png" alt="chevereto03.png"></p>
<p>随后安装成功！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CentOS重启后resolv.conf被重置的解决方案]]></title>
        <id>https://skytotwo.github.io//post/centos-resolvconf-dns</id>
        <link href="https://skytotwo.github.io//post/centos-resolvconf-dns">
        </link>
        <updated>2019-09-01T08:21:20.000Z</updated>
        <summary type="html"><![CDATA[<p>近期在修改一台CentOS服务器的dns时发现只要重启服务器DNS就会被强制还原，解决方案如下：</p>
]]></summary>
        <content type="html"><![CDATA[<p>近期在修改一台CentOS服务器的dns时发现只要重启服务器DNS就会被强制还原，解决方案如下：</p>
 <!-- more -->
<p><strong>1、首先在网卡设置中修改NM_CONTROLLED的值：</strong><br>
修改文件/etc/sysconfig/network-scripts/ifcfg-eth0的内容：</p>
<pre><code class="language-shell">NM_CONTROLLED=&quot;no&quot;  //是否允许Network Manager管理，设置为no
</code></pre>
<p>默认允许Network Manager管理DNS，所以首先设置为no，然后操作DNS设置</p>
<p><strong>2、设置DNS内容：</strong><br>
修改DNS可以有如下两种方案：</p>
<p>①、修改网卡设置：<br>
在/etc/sysconfig/network-scripts/ifcfg-eth0中修改内容：</p>
<pre><code class="language-shell">PEERDNS=&quot;yes&quot;
DNS1=&quot;xxx.xxx.xxx.xxx&quot;
DNS2=&quot;xxx.xxx.xxx.xxx&quot;
</code></pre>
<p>这种设置方案是以网卡中设置的DNS为主，resolv.conf中按照网卡设置的DNS内容自动生成，以后想修改DNS，必须修改网卡中的设置才不会在服务器重启之后出现DNS设置失效的问题。</p>
<p>②、直接修改/etc/resolv.conf的值：<br>
PS.需要注意的是，若要使直接修改的DNS内容不会在服务器重启之后丢失，需要设置网卡中PEERDNS的值为no：</p>
<pre><code class="language-shell">nameserver xxx.xxx.xxx.xxx
nameserver xxx.xxx.xxx.xxx
</code></pre>
<p><strong>3、修改完毕之后重启网卡：</strong></p>
<pre><code class="language-shell">service network restart
</code></pre>
<p>按照上面任意一种方案修改DNS设置之后都不会出现重启服务器DNS设置复原的情况，适用于dhcp启动的机器。</p>
]]></content>
    </entry>
</feed>