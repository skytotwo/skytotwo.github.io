<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://skytotwo.github.io/</id>
    <title>Totoro の Home</title>
    <updated>2019-08-26T13:37:58.704Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://skytotwo.github.io/"/>
    <link rel="self" href="https://skytotwo.github.io//atom.xml"/>
    <subtitle>空杯心态，每天进步</subtitle>
    <logo>https://skytotwo.github.io//images/avatar.png</logo>
    <icon>https://skytotwo.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Totoro の Home</rights>
    <entry>
        <title type="html"><![CDATA[Mac下重置mysql5.7 密码]]></title>
        <id>https://skytotwo.github.io//post/mac-mysql57-resetpd</id>
        <link href="https://skytotwo.github.io//post/mac-mysql57-resetpd">
        </link>
        <updated>2019-08-26T13:35:35.000Z</updated>
        <summary type="html"><![CDATA[<p>先附上mysql 5.7版本的下载地址，因为5.7版本太经典了，所以我也偏爱这个版本。</p>
]]></summary>
        <content type="html"><![CDATA[<p>先附上mysql 5.7版本的下载地址，因为5.7版本太经典了，所以我也偏爱这个版本。</p>
 <!-- more --> 
<p><a href="https://dev.mysql.com/downloads/mysql/5.7.html#downloads" title="mysql5.7下载地址">mysql5.7下载地址</a><br>
首先是mysql的基本命令：启动、停止和重启</p>
<pre><code class="language-shell">启动MySQL服务
sudo /usr/local/MySQL/support-files/mysql.server start
 
停止MySQL服务
sudo /usr/local/mysql/support-files/mysql.server stop
 
重启MySQL服务
sudo /usr/local/mysql/support-files/mysql.server restart

</code></pre>
<p>令人苦恼的是安装完成后，作为开发环境还是设置一个自己好记的密码比较好，而不是初始给你那个乱七八糟的密码。<br>
折腾了一会儿总算成功了。下面是步骤：</p>
<pre><code class="language-python">1. 停止 mysql server. 通常是在 '系统偏好设置' &gt; MySQL &gt; 'Stop MySQL Server'。或者执行上文中的停止mysql命令。
2.打开一个终端，输入：
sudo /usr/local/mysql/bin/mysqld_safe --skip-grant-tables，用安全模式启动，这样就可以不用输密码链接mysql了。
3.然后打开另一个终端，输入:
sudo /usr/local/mysql/bin/mysql -u root，这样就进入了mysql了。
4.在mysql输入语句模式下输入：FLUSH PRIVILEGES;
5.接着输入：ALTER USER 'root'@'localhost' IDENTIFIED BY 'NewPassword';
6.再输入：FLUSH PRIVILEGES;输入\q退出。
7.重启mysql。
</code></pre>
<p>至此就ok啦，妥妥的连接上~</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java O(n^2)实现]]></title>
        <id>https://skytotwo.github.io//post/java-on2</id>
        <link href="https://skytotwo.github.io//post/java-on2">
        </link>
        <updated>2019-08-26T13:32:32.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-java">/**
 * 算法实现，拼接设备
 * 示例：
 * 实现前：甲-重要设备,乙-重要设备,丙-关注设备,丁-关注设备,你-重要设备
 * 实现后：甲、乙、你为重要设备,丙、丁为关注设备,
 * @author xyq
 */
String dataheader = &quot;&quot;;
String finaldata = &quot;&quot;;
String[] datas = totals.split(&quot;,&quot;);
for (int i = 0; i &lt; datas.length; i++) { //遍历每一个，得到每个的格式“xxxx-xxxx”
	String shebei = datas[i].split(&quot;-&quot;)[0]; //取出当前设备
	String sbzyd = datas[i].split(&quot;-&quot;)[1];  //取出当前重要度
	if(finaldata.contains(shebei)){ //最后拼接包含该循环设备则跳出
		continue;
	}
	for (int j = i; j &lt; datas.length; j++) { //再次遍历，起点为当前循环位置
		if(datas[j].contains(sbzyd)){  
			if(datas[j].contains(shebei)){
				dataheader = shebei;
				continue;
			}
			if(!&quot;&quot;.equals(dataheader)){ //判断当无重复匹配的时候
				dataheader = dataheader+&quot;、&quot;+datas[j].split(&quot;-&quot;)[0];
			}else{
				dataheader = datas[i].split(&quot;-&quot;)[0]+&quot;、&quot;+datas[j].split(&quot;-&quot;)[0];
			}
		}
	}
	finaldata+=dataheader+&quot;为&quot;+sbzyd+&quot;,&quot;;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flask中自定义JSONEncoder]]></title>
        <id>https://skytotwo.github.io//post/flask-jsonencoder</id>
        <link href="https://skytotwo.github.io//post/flask-jsonencoder">
        </link>
        <updated>2019-08-26T13:29:21.000Z</updated>
        <summary type="html"><![CDATA[<p>正在用Flask写个小项目，要实现将自定义类型转化成json格式。Flask一般用jsonify来使接口返回json数据，实现一个Flask内使用的JSONEncoder。</p>
]]></summary>
        <content type="html"><![CDATA[<p>正在用Flask写个小项目，要实现将自定义类型转化成json格式。Flask一般用jsonify来使接口返回json数据，实现一个Flask内使用的JSONEncoder。</p>
 <!-- more --> 
<pre><code class="language-python">from flask.json import JSONEncoder

#编写自己的json编码器，并继承原有的
class MyJSONEncoder(JSONEncoder):
	#在jsonify中不能直接序列化该类型的时候，才会调用default方法，并进入分类执行
    def default(self, obj):
        if isinstance(obj, EqltByGene):
			#自定义返回字典
            return {
                'gene_id': obj.gene_id, 
                'gene_symbol': obj.gene_symbol,
                'p_value': obj.p_value,
            }
        return super(MyJSONEncoder, self).default(obj)

app = Flask(__name__)
app.json_encoder = MyJSONEncoder #将自定义的json编码器赋给flask原有的
</code></pre>
<p>这样在使用jsonify的时候，就可以将MyObject类型的实例转化到json格式。</p>
<p>问题思考：</p>
<ol>
<li>如果项目中有很多自定义Class，都有这个需求，JSONEncoder的实现似乎会很丑陋，有什么好的方式？</li>
<li>同一个Class在不同的场景，json后要保留的字段差别如果很大，该如果实现？</li>
</ol>
<p>对该问题的实现，可以采用以下方式：</p>
<pre><code class="language-python">#在模型对象中重写dict方法
class User(Base):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(50), unique=True, nullable=False)
    nickname = db.Column(db.String(24), unique=True)
    auth = db.Column(db.SmallInteger, default=1) # 1是普通用户，2是管理员
    _password = db.Column('password', db.String(100))

    #自定义将模型对象转成dict ，即dict(user)
    #dict(user)，会先调用keys方法，这里重写，自定义获取返回的字段
    def keys(self):
        return ['id', 'email', 'nickname', 'auth']

    # dict(user)获取完字段后，会取出对应字段的值，这里使用__getitem__，这里getattr(self, item)拿到值信息，item为key名
    def __getitem__(self, item):
        return getattr(self, item)
</code></pre>
<p>以上的keys和getitem方法，会在自定义的jsonencoder方法中dict（对象）时候调用，如下：</p>
<pre><code class="language-python">#自定义json方法，在方法中实现对象转字典返回，这需要在模型对象中实现对应dict方法
class JSONEncoder(_JSONEncoder):
    def default(self, o):
        return dict(o)
</code></pre>
<p>调用方法如：</p>
<pre><code class="language-python">def get_user(uid):
    user = User.query.get_or_404(uid)
    return jsonify(user)
</code></pre>
<p>所以这样就实现了jsonencoder将对象转化成字典，然后直接jsonnfy调用序列化。并且复用性强，在模型中定义dict调用的方法，使得转化的字典key可以控制。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python可迭代对象，迭代器，生成器的区别]]></title>
        <id>https://skytotwo.github.io//post/python-iter&amp;decorator</id>
        <link href="https://skytotwo.github.io//post/python-iter&amp;decorator">
        </link>
        <updated>2019-08-26T13:23:20.000Z</updated>
        <summary type="html"><![CDATA[<p>三者简要关系图<br>
<img src="http://picture.totoro.site/images/2019/08/26/20180602164019_717.png" alt="20180602164019_717.png"></p>
]]></summary>
        <content type="html"><![CDATA[<p>三者简要关系图<br>
<img src="http://picture.totoro.site/images/2019/08/26/20180602164019_717.png" alt="20180602164019_717.png"></p>
<!-- more --> 
<p>###<strong>可迭代对象与迭代器</strong></p>
<p>刚开始我认为这两者是等同的，但后来发现并不是这样；下面直接抛出结论：</p>
<ul>
<li>1）可迭代对象包含迭代器。</li>
<li>2）如果一个对象拥有__iter__方法，其是可迭代对象；如果一个对象拥有next方法，其是迭代器。</li>
<li>3）定义可迭代对象，必须实现__iter__方法；定义迭代器，必须实现__iter__和next方法。</li>
</ul>
<p>你也许会问，结论3与结论2是不是有一点矛盾？既然一个对象拥有了next方法就是迭代器，那为什么迭代器必须同时实现两方法呢？</p>
<p>因为结论1，迭代器也是可迭代对象，因此迭代器必须也实现__iter__方法。</p>
<p><strong>介绍一下上面涉及到的两个方法：</strong></p>
<p>1）<strong>iter</strong>()</p>
<p>该方法返回的是当前对象的迭代器类的实例。因为可迭代对象与迭代器都要实现这个方法，因此有以下两种写法。</p>
<p>写法一：用于可迭代对象类的写法，返回该可迭代对象的迭代器类的实例。</p>
<p>写法二：用于迭代器类的写法，直接返回self（即自己本身），表示自身即是自己的迭代器。</p>
<p>也许有点晕，没关系，下面会给出两写法的例子，我们结合具体例子看。</p>
<p>2）next()<br>
返回迭代的每一步，实现该方法时注意要最后超出边界要抛出StopIteration异常。</p>
<p>下面举个可迭代对象与迭代器的例子：</p>
<pre><code class="language-python">[python] view plain copy
#!/usr/bin/env python  
# coding=utf-8  
  
  
class MyList(object):            # 定义可迭代对象类  
  
    def __init__(self, num):  
        self.data = num          # 上边界  
  
    def __iter__(self):  
        return MyListIterator(self.data)  # 返回该可迭代对象的迭代器类的实例  
  
  
class MyListIterator(object):    # 定义迭代器类，其是MyList可迭代对象的迭代器类  
  
    def __init__(self, data):  
        self.data = data         # 上边界  
        self.now = 0             # 当前迭代值，初始为0  
  
    def __iter__(self):  
        return self              # 返回该对象的迭代器类的实例；因为自己就是迭代器，所以返回self  
  
    def next(self):              # 迭代器类必须实现的方法  
        while self.now &lt; self.data:  
            self.now += 1  
            return self.now - 1  # 返回当前迭代值  
        raise StopIteration      # 超出上边界，抛出异常  
  
  
my_list = MyList(5)              # 得到一个可迭代对象  
print type(my_list)              # 返回该对象的类型  
  
my_list_iter = iter(my_list)     # 得到该对象的迭代器实例，iter函数在下面会详细解释  
print type(my_list_iter)  
  
  
for i in my_list:                # 迭代  
    print i  
</code></pre>
<p>运行结果：<br>
<img src="http://picture.totoro.site/images/2019/08/26/20180602164211_226.png" alt="20180602164211_226.png"></p>
<p>问题：上面的例子中出现了iter函数，这是什么东西？和__iter__方法有关系吗？<br>
其实该函数与迭代是息息相关的，通过在Python命令行中打印“help(iter)”得知其有以下两种用法。</p>
<p>用法一：iter(callable, sentinel)<br>
不停的调用callable，直至其的返回值等于sentinel。其中的callable可以是函数，方法或实现了__call__方法的实例。</p>
<p>用法二：iter(collection)<br>
1）用于返回collection对象的迭代器实例，这里的collection我认为表示的是可迭代对象，即该对象必须实现__iter__方法；事实上iter函数与__iter__方法联系非常紧密，iter()是直接调用该对象的__iter__()，并把__iter__()的返回结果作为自己的返回值，故该用法常被称为“创建迭代器”。<br>
2）iter函数可以显示调用，或当执行“for i in obj:”，Python解释器会在第一次迭代时自动调用iter(obj)，之后的迭代会调用迭代器的next方法，for语句会自动处理最后抛出的StopIteration异常。</p>
<p>通过上面的例子，相信对可迭代对象与迭代器有了更具体的认识，那么生成器与它们有什么关系呢？下面简单谈一谈</p>
<p>###<strong>生成器</strong></p>
<p>生成器是一种特殊的迭代器，生成器自动实现了“迭代器协议”（即__iter__和next方法），不需要再手动实现两方法。</p>
<p>生成器在迭代的过程中可以改变当前迭代值，而修改普通迭代器的当前迭代值往往会发生异常，影响程序的执行。</p>
<pre><code class="language-python">for c1 in c:
    print(c1+=2)
</code></pre>
<p><img src="http://picture.totoro.site/images/2019/08/26/20180602164347_746.png" alt="20180602164347_746.png"></p>
<p>看一个生成器的例子：</p>
<pre><code class="language-python">[python] view plain copy
#!/usr/bin/env python  
# coding=utf-8  
  
  
def myList(num):      # 定义生成器  
    now = 0           # 当前迭代值，初始为0  
    while now &lt; num:  
        val = (yield now)                      # 返回当前迭代值，并接受可能的send发送值；yield在下面会解释  
        now = now + 1 if val is None else val  # val为None，迭代值自增1，否则重新设定当前迭代值为val  
  
my_list = myList(5)   # 得到一个生成器对象  
  
print my_list.next()  # 返回当前迭代值  
print my_list.next()  
  
my_list.send(3)       # 重新设定当前的迭代值  
print my_list.next()  
  
print dir(my_list)    # 返回该对象所拥有的方法名，可以看到__iter__与next在其中 
</code></pre>
<p>运行结果：<br>
<img src="http://picture.totoro.site/images/2019/08/26/20180602164437_60.png" alt="20180602164437_60.png"></p>
<p>具有yield关键字的函数都是生成器，yield可以理解为return，返回后面的值给调用者。不同的是return返回后，函数会释放，而生成器则不会。在直接调用next方法或用for语句进行下一次迭代时，生成器会从yield下一句开始执行，直至遇到下一个yield。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[flask全局404装饰器（全局以及蓝图）]]></title>
        <id>https://skytotwo.github.io//post/flask-404-decorator</id>
        <link href="https://skytotwo.github.io//post/flask-404-decorator">
        </link>
        <updated>2019-08-26T08:25:56.000Z</updated>
        <summary type="html"><![CDATA[<p>在flask里是可以实现全局事件注册的，利用装饰器来注册相应的事件，比如404错误，数据库错误等，当错误出现就会捕获走对应的逻辑，很方便。</p>
]]></summary>
        <content type="html"><![CDATA[<p>在flask里是可以实现全局事件注册的，利用装饰器来注册相应的事件，比如404错误，数据库错误等，当错误出现就会捕获走对应的逻辑，很方便。</p>
<!-- more --> 
<pre><code class="language-python">#全局
@app.errorhandler(404)
def page_not_found(error):
    &quot;&quot;&quot;
    404
    &quot;&quot;&quot;
    return render_template(&quot;home/404.html&quot;), 404

#蓝图，注册范围为本蓝图
@web.errorhandler(404)
def page_not_found(error):
    &quot;&quot;&quot;
    404
    &quot;&quot;&quot;
    return render_template(&quot;home/404.html&quot;), 404

#蓝图，注册范围为全局
@web.app_errorhandler(404)
def page_not_found(error):
    &quot;&quot;&quot;
    404
    &quot;&quot;&quot;
    return render_template(&quot;home/404.html&quot;), 404
</code></pre>
<p>注意：</p>
<ul>
<li>核心对象加载的错误处理装饰器，全局的直接是@app.errorhandler(404)</li>
<li>蓝图的加载错误处理装饰器：
<ol>
<li>蓝图名.errorhandler(404)，表示在该蓝图范围中的错误才能触发处理程序</li>
<li>蓝图名.app_errorhandler(404)，表示注册为程序全局的错误处理程序</li>
</ol>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于Flask的蓝图解释一二]]></title>
        <id>https://skytotwo.github.io//post/flask-blueprint</id>
        <link href="https://skytotwo.github.io//post/flask-blueprint">
        </link>
        <updated>2019-08-26T08:23:37.000Z</updated>
        <summary type="html"><![CDATA[<p>以下是一个最基本的蓝图示例。在这里，我们将使用蓝图来简单地渲染静态模板:</p>
]]></summary>
        <content type="html"><![CDATA[<p>以下是一个最基本的蓝图示例。在这里，我们将使用蓝图来简单地渲染静态模板:</p>
<!-- more -->
<pre><code class="language-python">from flask import Blueprint, render_template, abort
from jinja2 import TemplateNotFound

simple_page = Blueprint('simple_page', __name__,
                        template_folder='templates')

from app.feedback import feedback #视图
</code></pre>
<pre><code class="language-python">#视图部分 feedback.py
from . import simple_page

@simple_page.route('/', defaults={'page': 'index'})
@simple_page.route('/&lt;page&gt;')
def show(page):
    try:
        return render_template('pages/%s.html' % page)
    except TemplateNotFound:
        abort(404)
</code></pre>
<p>当你使用 @simple_page.route 装饰器绑定一个函数时，蓝图会记录下所登记的 show 函数。当以后在应用中注册蓝图时，这个函数会被注册到应用中。另外，它 会把构建 Blueprint 时所使用的名称（在本例为 simple_page ）作 为函数端点的前缀。</p>
<pre><code class="language-python">可以这样注册蓝图:

from flask import Flask
from yourapplication.simple_page import simple_page

app = Flask(__name__)
app.register_blueprint(simple_page)
以下是注册蓝图后形成的规则:

[&lt;Rule '/static/&lt;filename&gt;' (HEAD, OPTIONS, GET) -&gt; static&gt;,
 &lt;Rule '/&lt;page&gt;' (HEAD, OPTIONS, GET) -&gt; simple_page.show&gt;,
 &lt;Rule '/' (HEAD, OPTIONS, GET) -&gt; simple_page.show&gt;]
</code></pre>
<p>所以当外部访问到对应url规则时，会直接找到指定蓝图下的方法。也就是定义蓝图下引入视图的意义，会直接在那里找对应方法。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[谈谈python中的深拷贝和浅拷贝]]></title>
        <id>https://skytotwo.github.io//post/python-copy</id>
        <link href="https://skytotwo.github.io//post/python-copy">
        </link>
        <updated>2019-08-26T08:19:53.000Z</updated>
        <summary type="html"><![CDATA[<p>原文链接：谈谈python中的深拷贝和浅拷贝<a href="https://www.jianshu.com/p/efa9dd51f5cc">https://www.jianshu.com/p/efa9dd51f5cc</a></p>
<p>最近面试被问到python中深拷贝和浅拷贝的知识<br>
这里进行下总结，以便今后复习<br>
python中的深拷贝和浅拷贝和java里面的概念是一样的，所谓浅拷贝就是对引用的拷贝，所谓深拷贝就是对对象的资源的拷贝。</p>
]]></summary>
        <content type="html"><![CDATA[<p>原文链接：谈谈python中的深拷贝和浅拷贝<a href="https://www.jianshu.com/p/efa9dd51f5cc">https://www.jianshu.com/p/efa9dd51f5cc</a></p>
<p>最近面试被问到python中深拷贝和浅拷贝的知识<br>
这里进行下总结，以便今后复习<br>
python中的深拷贝和浅拷贝和java里面的概念是一样的，所谓浅拷贝就是对引用的拷贝，所谓深拷贝就是对对象的资源的拷贝。</p>
 <!-- more -->
<p><strong>首先，对赋值操作我们要有以下认识：</strong></p>
<ol>
<li>赋值是将一个对象的地址赋值给一个变量，让变量指向该地址（ 旧瓶装旧酒 ）。</li>
<li>修改不可变对象（str、tuple）需要开辟新的空间</li>
<li>修改可变对象（list等）不需要开辟新的空间<br>
浅拷贝仅仅复制了容器中元素的地址</li>
</ol>
<pre><code class="language-python">&gt;&gt;&gt; a=['hello',[1,2,3]]
&gt;&gt;&gt; b=a[:]
&gt;&gt;&gt; [id(x) for x in a]
[55792504, 6444104]
&gt;&gt;&gt; [id(x) for x in b]
[55792504, 6444104]
&gt;&gt;&gt; a[0]='world'
&gt;&gt;&gt; a[1].append(4)
&gt;&gt;&gt; print(a)
['world', [1, 2, 3, 4]]
&gt;&gt;&gt; print(b)
['hello', [1, 2, 3, 4]]
</code></pre>
<p>这里可以看出，未修改前，a和b中元素的地址都是相同的，不可变的hello<br>
和可变的list地址都一样，说明浅拷贝知识将容器内的元素的地址复制了一份。这可以通过修改后，b中字符串没改变，但是list元素随着a相应改变得到验证。</p>
<ul>
<li>浅拷贝是在另一块地址中创建一个新的变量或容器，但是容器内的元素的地址均是源对象的元素的地址的拷贝。也就是说新的容器中指向了旧的元素（ 新瓶装旧酒 ）。</li>
</ul>
<p>深拷贝，完全拷贝了一个副本，容器内部元素地址都不一样</p>
<pre><code class="language-python">&gt;&gt;&gt; from copy import deepcopy
&gt;&gt;&gt; a=['hello',[1,2,3]]
&gt;&gt;&gt; b=deepcopy(a)
&gt;&gt;&gt; [id(x) for x in a]
[55792504, 55645000]
&gt;&gt;&gt; [id(x) for x in b]
[55792504, 58338824]
&gt;&gt;&gt; a[0]='world'
&gt;&gt;&gt; a[1].append(4)
&gt;&gt;&gt; 
&gt;&gt;&gt; print(a)
['world', [1, 2, 3, 4]]
&gt;&gt;&gt; print(b)
['hello', [1, 2, 3]]
</code></pre>
<p>这里可以看出，深拷贝后，a和b的地址以及a和b中的元素地址均不同，这是完全拷贝的一个副本，修改a后，发现b没有发生任何改变，因为b是一个完全的副本，元素地址与a均不同，a修改不影响b。</p>
<ul>
<li>深拷贝是在另一块地址中创建一个新的变量或容器，同时容器内的元素的地址也是新开辟的，仅仅是值相同而已，是完全的副本。也就是说（ 新瓶装新酒 ）。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flask中url_for的参数解释]]></title>
        <id>https://skytotwo.github.io//post/flask-url_for</id>
        <link href="https://skytotwo.github.io//post/flask-url_for">
        </link>
        <updated>2019-08-26T08:17:44.000Z</updated>
        <summary type="html"><![CDATA[<p>url_for函数的作用是：通过给定的endpoint端点和额外参数，结合请求上下文和应用上下文，生成一个url地址并返回。</p>
]]></summary>
        <content type="html"><![CDATA[<p>url_for函数的作用是：通过给定的endpoint端点和额外参数，结合请求上下文和应用上下文，生成一个url地址并返回。</p>
<!-- more --> 
<p>其中的额外参数有：<br>
_external: 是否使用绝对路径<br>
_scheme：使用http还是https，设置这个参数时，必须使_external=True<br>
_anchor：锚点，可以定位到html中的某一个位置<br>
_method：http方法,post、get等</p>
<p>endpoint其实又叫做端点，默认情况下是视图函数名，也可以自定义端点名，主要是用作url_for反向寻找视图的一个标记，如：</p>
<pre><code class="language-python">{{ url_for('login') }}
</code></pre>
<p>login就是endpoint端点名。</p>
<p>url_for() 函数还支持一种简写的端点形式，在蓝本中可以省略蓝本名，例如url_for('.<br>
index')。在这种写法中，命名空间是当前请求所在的蓝本。这意味着同一蓝本中的重定向<br>
可以使用简写形式，但跨蓝本的重定向必须使用带有命名空间的端点名。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[单页面应用程序和多页面应用程序（网站）的区别]]></title>
        <id>https://skytotwo.github.io//post/single&amp;mutipage</id>
        <link href="https://skytotwo.github.io//post/single&amp;mutipage">
        </link>
        <updated>2019-08-26T08:13:52.000Z</updated>
        <summary type="html"><![CDATA[<p>单页面和双页面应用的区别：</p>
<ul>
<li>1、单页面应用程序的数据渲染是在客户端进行的；而多页面应用程序的数据渲染则是在服务端进行的。</li>
<li>2、单页面应用程序的数据请求等是在js中通过ajax完成的；多页面应用程序则是在服务端试图函数中完成的。</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<p>单页面和双页面应用的区别：</p>
<ul>
<li>1、单页面应用程序的数据渲染是在客户端进行的；而多页面应用程序的数据渲染则是在服务端进行的。</li>
<li>2、单页面应用程序的数据请求等是在js中通过ajax完成的；多页面应用程序则是在服务端试图函数中完成的。</li>
</ul>
<h2 id="-more-"><!-- more --></h2>
<h3 id="单页面应用singlepage-web-applicationspa"><strong>单页面应用（SinglePage Web Application，SPA）</strong></h3>
<p>只有一张Web页面的应用，是一种从Web服务器加载的富客户端，单页面跳转仅刷新局部资源 ，公共资源(js、css等)仅需加载一次，常用于PC端官网、购物等网站<br>
如图：<br>
<img src="/attached/image/20180508/20180508223839_750.png" alt=""></p>
<h3 id="多页面应用multipage-applicationmpa"><strong>多页面应用（MultiPage Application，MPA）</strong></h3>
<p>多页面跳转刷新所有资源，每个公共资源(js、css等)需选择性重新加载，常用于 app 或 客户端等</p>
<p>如图：<br>
<img src="/attached/image/20180508/20180508223908_626.png" alt=""></p>
<p>具体对比分析：</p>
<p><img src="/attached/image/20180508/20180508223927_729.jpg" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python的with上下文要点]]></title>
        <id>https://skytotwo.github.io//post/python-with-context</id>
        <link href="https://skytotwo.github.io//post/python-with-context">
        </link>
        <updated>2019-08-26T08:09:49.000Z</updated>
        <summary type="html"><![CDATA[<p>python的的with上下文其实可以自己实现，只要该对象实现了__enter__和__exit__方法，就实现了一个with上下文，可以用with来处理该对象，如下：</p>
]]></summary>
        <content type="html"><![CDATA[<p>python的的with上下文其实可以自己实现，只要该对象实现了__enter__和__exit__方法，就实现了一个with上下文，可以用with来处理该对象，如下：</p>
<!-- more -->
<pre><code class="language-python">class MyResource:
	def __enter__(self):
		return self
	
	def __exit__(self, exc_type, exc_value, tb):
		if tb:
			print('proccess exception')
		else:
			print('no exception')
		print('close resource connection')
		
	def query(self):
		print('query data')
		

with MyResource() as resource:
	resource.query()
</code></pre>
<p>注意：<br>
1、任何实现了__enter__和__exit__魔法方法的对象都能用with处理<br>
2、with实例化对象后用as赋给一个变量，变量为__enter__所返回的值，上面代码中__enter__返回的是实例对象。<br>
3、调用的顺序是__enter__，然后with里的逻辑，最后是__exit__方法。<br>
4、<strong>exit</strong> 方法包含4个参数，分别是(self, exc_type, exc_value, tb)，第一个是实例对象，后面三个分别为异常类型、异常值和异常堆栈信息。这里主要是为了捕获异常，只要是逻辑处理中危险异常，都会在这里捕获，并退出。<br>
5、<strong>exit</strong> 方法是有返回的，如果return值是Ture的话，就代表捕获了异常，不会抛出；如果返回值为空或者返回False，就代表异常会继续抛出。</p>
]]></content>
    </entry>
</feed>