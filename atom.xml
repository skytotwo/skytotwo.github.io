<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://skytotwo.github.io/</id>
    <title>Totoro の Home</title>
    <updated>2019-08-26T13:52:38.602Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://skytotwo.github.io/"/>
    <link rel="self" href="https://skytotwo.github.io//atom.xml"/>
    <subtitle>空杯心态，每天进步</subtitle>
    <logo>https://skytotwo.github.io//images/avatar.png</logo>
    <icon>https://skytotwo.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Totoro の Home</rights>
    <entry>
        <title type="html"><![CDATA[centos7 nginx + uwsgi 部署flask应用]]></title>
        <id>https://skytotwo.github.io//post/centos7-nginx-uwsgi-flask</id>
        <link href="https://skytotwo.github.io//post/centos7-nginx-uwsgi-flask">
        </link>
        <updated>2019-08-26T13:46:03.000Z</updated>
        <summary type="html"><![CDATA[<p>这里带来的nginx+uwsgi部署方式是考虑到兼顾flask的并发，能给项目带来更好的体验。</p>
]]></summary>
        <content type="html"><![CDATA[<p>这里带来的nginx+uwsgi部署方式是考虑到兼顾flask的并发，能给项目带来更好的体验。</p>
<!-- more --> 
<p>具体部署图示如下：<br>
<img src="http://picture.totoro.site/images/2019/08/26/WX20190826-2148152x.png" alt="WX20190826-2148152x.png"></p>
<p>首先需要的是之前文章里面提的环境搭建，这是前提，具体可以点击链接跳转查看：<br>
<a href="https://totoro.site/post/centos7-python-env/" title="centos7 部署应用相关配置">centos7 部署应用相关配置</a></p>
<h4 id="安装uwsgi"><strong>安装uWSGI</strong></h4>
<p>安装前需要安装一些依赖包，输入如下命令：</p>
<pre><code class="language-python">yum -y install gcc  gcc-c++ zlib zlib-devel openssl openssl-devel pcre pcre-devel GeoIP gd libXpm libxslt sqlite-devel

</code></pre>
<p>然后：</p>
<pre><code class="language-python">进入虚拟环境里：
pip  install uwsgi 
</code></pre>
<p>然后新建一个uwsgi.ini配置文件，放置在应用根部目下，<br>
打开并写入以下内容：</p>
<pre><code class="language-python">[uwsgi]


#http=127.0.0.1:5000
# uwsgi 启动时所使用的地址与端口

socket = 127.0.0.1:5000

#虚拟环境目录
home = /root/.virtualenvs/flask-movie

#指向网站根目录
chdir = /usr/local/nginx/html/flask_movie

#python启动程序文件
wsgi-file = manage.py

#python程序内用于启动的application变量名
callable = app

#处理器数
processes = 4

#线程数
threads = 2

#状态监测地址
stats = 127.0.0.1:9191

#设置uwsgi包解析的内部缓存区大小。默认4k

buffer-size = 32768
</code></pre>
<h4 id="uwsgi命令"><strong>uWSGI命令</strong></h4>
<pre><code class="language-python">uwsgi 启动 ：虚拟环境下uwsgi config.ini
uwsgi 关闭：虚拟环境下killall -9 uwsgi
</code></pre>
<p>在根目录下，输入启动命令，如果不报错，出现如下命令，则启动成功。</p>
<pre><code class="language-python">[uWSGI] getting INI configuration from uwsgi.ini
    *** Starting uWSGI 2.0.17 (64bit) on [Tue Jul  3 22:42:15 2018] ***
    compiled with version: 4.8.5 20150623 (Red Hat 4.8.5-16) on 02 July 2018 14:12:13
    os: Linux-3.10.0-693.21.1.el7.x86_64 #1 SMP Wed Mar 7 19:03:37 UTC 2018
    nodename: shenghun
    machine: x86_64
    clock source: unix
    pcre jit disabled
    detected number of CPU cores: 1
    current working directory: /home/Servers_Nginx/Fisher
    detected binary path: /usr/bin/uwsgi
    uWSGI running as root, you can use --uid/--gid/--chroot options
</code></pre>
<h4 id="nginx的配置"><strong>nginx的配置</strong></h4>
<p>虽然只有Uwsgi也可以直接部署项目,但是为了安全,需要Nginx来进行请求代理，反向代理代理的是内部服务器,正是有Nginx存在,Uwsgi的真正接口才不会暴露在网络上,服务器的安全才有了一定的保障(当然,恶意攻击另说),此外,Nginx还自带防DDoS攻击机制.可以说日常使用是非常省心了.</p>
<p>前文已经对nginx的安装有了介绍，这里就不重复说明了，具体可以参考以下链接：<br>
<a href="http://listenlife.cn/post/43" title="nginx安装">nginx安装</a></p>
<p>对于服务器来说，可能不会单单只部署一个应用，可能存在多个网站站点的情况，所以配置nginx一般也要考虑到这种情况，这里采用的是主文件加配置文件的方式，单个应用的nginx配置文件单独放置，用include的方式引入主文件中。</p>
<p><strong>主文件配置</strong>：<br>
新建主配置文件nginx.conf</p>
<pre><code class="language-python">worker_processes 4;
events {
    worker_connections 262140;
}
http {
    include mime.types;
    default_type application/octet-stream;
    sendfile on;
    keepalive_timeout 65;
    limit_conn_zone $binary_remote_addr zone=addr:5m;
    
	include /etc/nginx/vhosts/*.conf;
}
</code></pre>
<p>将其复制到nginx配置文件目录下：</p>
<pre><code class="language-python">cp nginx.conf /usr/local/nginx/conf/
</code></pre>
<p><strong>项目nginx配置子文件：</strong><br>
新建应用配置文件flask_movie.conf</p>
<pre><code class="language-shell">server {
        listen 80;
        server_name localhost;
        location / {
            root html;
            index index.html index.htm;
			include /usr/local/nginx/html/flask_movie/uwsgi_params;
			uwsgi_pass  127.0.0.1:5000; # 指向uwsgi 所应用的内部地址,所有请求将转发给uwsgi 处理 
			uwsgi_param UWSGI_PYHOME /root/.virtualenvs/flask-movie; # 指向虚拟环境目录 
			uwsgi_param UWSGI_CHDIR /usr/local/nginx/html/flask_movie; # 指向网站根目录 
			uwsgi_param UWSGI_SCRIPT manage:app; # 指定启动程序
			uwsgi_read_timeout 100;

        }
        location ~ \.flv$ {
            flv;
            limit_conn addr 4;
            limit_rate 1024k;
            rewrite ^/static/uploads/movies/(.+?).flv$ /flask_movie/app/static/uploads/movies/$1.flv permanent;
        }
        location ~ \.mp4$ {
            mp4;
            limit_conn addr 4;
            limit_rate 1024k;
            rewrite ^/static/uploads/movies/(.+?).mp4$ /flask_movie/app/static/uploads/movies/$1.mp4 permanent;
        }
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root html;
        }
    }
</code></pre>
<p>在/etc/下新建层级目录/nginx/vhosts/，然后将应用nginx配置文件放入目录中。</p>
<p>我在配置的时候出了一个错，记录一下，在重启nginx和开启uwsgi后，报：</p>
<pre><code class="language-shell">in bind_to_environ environ['REQUEST_METHOD'], path_info, KeyError: 'REQUEST_METHOD'
</code></pre>
<p>这是因为没有配置uwsgi_params，新建文件命名为uwsgi_params，放置在项目根目录下，内容如下：</p>
<pre><code class="language-shell">uwsgi_param QUERY_STRING        $query_string;
uwsgi_param REQUEST_METHOD      $request_method;
uwsgi_param CONTENT_TYPE        $content_type;
uwsgi_param CONTENT_LENGTH      $content_length;
 
uwsgi_param REQUEST_URI     	$request_uri;
uwsgi_param PATH_INFO       	$document_uri;
uwsgi_param DOCUMENT_ROOT       $document_root;
uwsgi_param SERVER_PROTOCOL     $server_protocol;
uwsgi_param UWSGI_SCHEME        $scheme;
 
uwsgi_param REMOTE_ADDR     	$remote_addr;
uwsgi_param REMOTE_PORT     	$remote_port;
uwsgi_param SERVER_PORT     	$server_port;
uwsgi_param SERVER_NAME     	$server_name;
</code></pre>
<p>然后启动项目：（项目根目录下操作）</p>
<pre><code class="language-shell">uwsgi uwsgi.ini
</code></pre>
<p>重启nginx：</p>
<pre><code class="language-shell">nginx -s stop
nginx
nginx -s reload
</code></pre>
<p>浏览器访问服务地址，点亮服务，一切ok，这样配置，也方便以后拓展。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[对python鸭子类型的理解]]></title>
        <id>https://skytotwo.github.io//post/python-docktype</id>
        <link href="https://skytotwo.github.io//post/python-docktype">
        </link>
        <updated>2019-08-26T13:41:10.000Z</updated>
        <summary type="html"><![CDATA[<p><strong>首先Python不支持多态，也不用支持多态，python是一种多态语言，崇尚鸭子类型。</strong> 以下是维基百科中对鸭子类型得论述：</p>
]]></summary>
        <content type="html"><![CDATA[<p><strong>首先Python不支持多态，也不用支持多态，python是一种多态语言，崇尚鸭子类型。</strong> 以下是维基百科中对鸭子类型得论述：</p>
<!-- more --> 
<p>在程序设计中，鸭子类型（英语：duck typing）是动态类型的一种风格。在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由当前方法和属性的集合决定。这个概念的名字来源于由James Whitcomb Riley提出的鸭子测试，“鸭子测试”可以这样表述：<br>
<strong>“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”</strong></p>
<p>在鸭子类型中，关注的不是对象的类型本身，而是它是如何使用的。例如，在不使用鸭子类型的语言中，我们可以编写一个函数，它接受一个类型为鸭的对象，并调用它的走和叫方法。<strong>在使用鸭子类型的语言中，这样的一个函数可以接受一个任意类型的对象，并调用它的走和叫方法</strong>。如果这些需要被调用的方法不存在，那么将引发一个运行时错误。<strong>任何拥有这样的正确的走和叫方法的对象都可被函数接受的这种行为</strong>引出了以上表述，这种决定类型的方式因此得名。</p>
<p>鸭子类型通常得益于不测试方法和函数中参数的类型，而是依赖文档、清晰的代码和测试来确保正确使用。从静态类型语言转向动态类型语言的用户通常试图添加一些静态的（在运行之前的）类型检查，从而影响了鸭子类型的益处和可伸缩性，并约束了语言的动态特性。</p>
<h4 id="python中的具体实现">python中的具体实现</h4>
<p>下面的代码就是一个简单的鸭子类型</p>
<pre><code class="language-python">class duck():
  def walk(self):
    print('I walk like a duck')
  def swim(self):
    print('i swim like a duck')

class person():
  def walk(self):
    print('this one walk like a duck') 
  def swim(self):
    print('this man swim like a duck')
</code></pre>
<pre><code class="language-python">def watch_duck(animal):
  animal.walk()
  animal.swim()

small_duck = duck()
watch_duck(small_duck)

duck_like_man = person()
watch_duck(duck_like_man)

</code></pre>
<p>输出结果：</p>
<pre><code class="language-python">output &gt;&gt; 
I walk like a duck
i swim like a duck

this one walk like a duck
this man swim like a duck
</code></pre>
<p>对于watch_duck方法来说，传入的参数类型并不重要，只要它实现了walk和swim方法，一切就ok。这就是鸭子类型的基本实现。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Golang关于import包的问题记录]]></title>
        <id>https://skytotwo.github.io//post/golang-import</id>
        <link href="https://skytotwo.github.io//post/golang-import">
        </link>
        <updated>2019-08-26T13:39:14.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>多个源文件可同属于一个包，只要声明时package指定的包名一样；</li>
<li>一个包对应生成一个*.a文件，生成的文件名并不是包名+.a组成，应该是目录名+.a组成</li>
<li>go install ××× 这里对应的并不是包名，而是路径名！！</li>
<li>import ××× 这里使用的也不是包名，也是路径名</li>
<li>×××××.SayHello() 这里使用的才是包名！</li>
<li>指定×××路径名就代表了此目录下唯一的包，编译器连接器默认就会去生成或者使用它，而不需要我们手动指明！</li>
<li>一个目录下就只能有一个包存在</li>
<li>对于调用有源码的第三方包，连接器在连接时，其实使用的并不是我们工作目录下的.a文件，而是以该最新源码编译出的临时文件夹中的.a文件</li>
<li>对于调用没有源码的第三方包，上面的临时编译不可能成功，那么临时目录下就不可能有.a文件，所以最后链接时就只能链接到工作目录下的.a文件</li>
<li>对于标准库，即便是修改了源代码，只要不重新编译Go源码，那么链接时使用的就还是已经编译好的*.a文件</li>
<li>包导入有三种模式：正常模式、别名模式、简便模式</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac下重置mysql5.7 密码]]></title>
        <id>https://skytotwo.github.io//post/mac-mysql57-resetpd</id>
        <link href="https://skytotwo.github.io//post/mac-mysql57-resetpd">
        </link>
        <updated>2019-08-26T13:35:35.000Z</updated>
        <summary type="html"><![CDATA[<p>先附上mysql 5.7版本的下载地址，因为5.7版本太经典了，所以我也偏爱这个版本。</p>
]]></summary>
        <content type="html"><![CDATA[<p>先附上mysql 5.7版本的下载地址，因为5.7版本太经典了，所以我也偏爱这个版本。</p>
 <!-- more --> 
<p><a href="https://dev.mysql.com/downloads/mysql/5.7.html#downloads" title="mysql5.7下载地址">mysql5.7下载地址</a><br>
首先是mysql的基本命令：启动、停止和重启</p>
<pre><code class="language-shell">启动MySQL服务
sudo /usr/local/MySQL/support-files/mysql.server start
 
停止MySQL服务
sudo /usr/local/mysql/support-files/mysql.server stop
 
重启MySQL服务
sudo /usr/local/mysql/support-files/mysql.server restart

</code></pre>
<p>令人苦恼的是安装完成后，作为开发环境还是设置一个自己好记的密码比较好，而不是初始给你那个乱七八糟的密码。<br>
折腾了一会儿总算成功了。下面是步骤：</p>
<pre><code class="language-python">1. 停止 mysql server. 通常是在 '系统偏好设置' &gt; MySQL &gt; 'Stop MySQL Server'。或者执行上文中的停止mysql命令。
2.打开一个终端，输入：
sudo /usr/local/mysql/bin/mysqld_safe --skip-grant-tables，用安全模式启动，这样就可以不用输密码链接mysql了。
3.然后打开另一个终端，输入:
sudo /usr/local/mysql/bin/mysql -u root，这样就进入了mysql了。
4.在mysql输入语句模式下输入：FLUSH PRIVILEGES;
5.接着输入：ALTER USER 'root'@'localhost' IDENTIFIED BY 'NewPassword';
6.再输入：FLUSH PRIVILEGES;输入\q退出。
7.重启mysql。
</code></pre>
<p>至此就ok啦，妥妥的连接上~</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java O(n^2)实现]]></title>
        <id>https://skytotwo.github.io//post/java-on2</id>
        <link href="https://skytotwo.github.io//post/java-on2">
        </link>
        <updated>2019-08-26T13:32:32.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-java">/**
 * 算法实现，拼接设备
 * 示例：
 * 实现前：甲-重要设备,乙-重要设备,丙-关注设备,丁-关注设备,你-重要设备
 * 实现后：甲、乙、你为重要设备,丙、丁为关注设备,
 * @author xyq
 */
String dataheader = &quot;&quot;;
String finaldata = &quot;&quot;;
String[] datas = totals.split(&quot;,&quot;);
for (int i = 0; i &lt; datas.length; i++) { //遍历每一个，得到每个的格式“xxxx-xxxx”
	String shebei = datas[i].split(&quot;-&quot;)[0]; //取出当前设备
	String sbzyd = datas[i].split(&quot;-&quot;)[1];  //取出当前重要度
	if(finaldata.contains(shebei)){ //最后拼接包含该循环设备则跳出
		continue;
	}
	for (int j = i; j &lt; datas.length; j++) { //再次遍历，起点为当前循环位置
		if(datas[j].contains(sbzyd)){  
			if(datas[j].contains(shebei)){
				dataheader = shebei;
				continue;
			}
			if(!&quot;&quot;.equals(dataheader)){ //判断当无重复匹配的时候
				dataheader = dataheader+&quot;、&quot;+datas[j].split(&quot;-&quot;)[0];
			}else{
				dataheader = datas[i].split(&quot;-&quot;)[0]+&quot;、&quot;+datas[j].split(&quot;-&quot;)[0];
			}
		}
	}
	finaldata+=dataheader+&quot;为&quot;+sbzyd+&quot;,&quot;;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flask中自定义JSONEncoder]]></title>
        <id>https://skytotwo.github.io//post/flask-jsonencoder</id>
        <link href="https://skytotwo.github.io//post/flask-jsonencoder">
        </link>
        <updated>2019-08-26T13:29:21.000Z</updated>
        <summary type="html"><![CDATA[<p>正在用Flask写个小项目，要实现将自定义类型转化成json格式。Flask一般用jsonify来使接口返回json数据，实现一个Flask内使用的JSONEncoder。</p>
]]></summary>
        <content type="html"><![CDATA[<p>正在用Flask写个小项目，要实现将自定义类型转化成json格式。Flask一般用jsonify来使接口返回json数据，实现一个Flask内使用的JSONEncoder。</p>
 <!-- more --> 
<pre><code class="language-python">from flask.json import JSONEncoder

#编写自己的json编码器，并继承原有的
class MyJSONEncoder(JSONEncoder):
	#在jsonify中不能直接序列化该类型的时候，才会调用default方法，并进入分类执行
    def default(self, obj):
        if isinstance(obj, EqltByGene):
			#自定义返回字典
            return {
                'gene_id': obj.gene_id, 
                'gene_symbol': obj.gene_symbol,
                'p_value': obj.p_value,
            }
        return super(MyJSONEncoder, self).default(obj)

app = Flask(__name__)
app.json_encoder = MyJSONEncoder #将自定义的json编码器赋给flask原有的
</code></pre>
<p>这样在使用jsonify的时候，就可以将MyObject类型的实例转化到json格式。</p>
<p>问题思考：</p>
<ol>
<li>如果项目中有很多自定义Class，都有这个需求，JSONEncoder的实现似乎会很丑陋，有什么好的方式？</li>
<li>同一个Class在不同的场景，json后要保留的字段差别如果很大，该如果实现？</li>
</ol>
<p>对该问题的实现，可以采用以下方式：</p>
<pre><code class="language-python">#在模型对象中重写dict方法
class User(Base):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(50), unique=True, nullable=False)
    nickname = db.Column(db.String(24), unique=True)
    auth = db.Column(db.SmallInteger, default=1) # 1是普通用户，2是管理员
    _password = db.Column('password', db.String(100))

    #自定义将模型对象转成dict ，即dict(user)
    #dict(user)，会先调用keys方法，这里重写，自定义获取返回的字段
    def keys(self):
        return ['id', 'email', 'nickname', 'auth']

    # dict(user)获取完字段后，会取出对应字段的值，这里使用__getitem__，这里getattr(self, item)拿到值信息，item为key名
    def __getitem__(self, item):
        return getattr(self, item)
</code></pre>
<p>以上的keys和getitem方法，会在自定义的jsonencoder方法中dict（对象）时候调用，如下：</p>
<pre><code class="language-python">#自定义json方法，在方法中实现对象转字典返回，这需要在模型对象中实现对应dict方法
class JSONEncoder(_JSONEncoder):
    def default(self, o):
        return dict(o)
</code></pre>
<p>调用方法如：</p>
<pre><code class="language-python">def get_user(uid):
    user = User.query.get_or_404(uid)
    return jsonify(user)
</code></pre>
<p>所以这样就实现了jsonencoder将对象转化成字典，然后直接jsonnfy调用序列化。并且复用性强，在模型中定义dict调用的方法，使得转化的字典key可以控制。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python可迭代对象，迭代器，生成器的区别]]></title>
        <id>https://skytotwo.github.io//post/python-iter&amp;decorator</id>
        <link href="https://skytotwo.github.io//post/python-iter&amp;decorator">
        </link>
        <updated>2019-08-26T13:23:20.000Z</updated>
        <summary type="html"><![CDATA[<p>三者简要关系图<br>
<img src="http://picture.totoro.site/images/2019/08/26/20180602164019_717.png" alt="20180602164019_717.png"></p>
]]></summary>
        <content type="html"><![CDATA[<p>三者简要关系图<br>
<img src="http://picture.totoro.site/images/2019/08/26/20180602164019_717.png" alt="20180602164019_717.png"></p>
<!-- more --> 
<p>###<strong>可迭代对象与迭代器</strong></p>
<p>刚开始我认为这两者是等同的，但后来发现并不是这样；下面直接抛出结论：</p>
<ul>
<li>1）可迭代对象包含迭代器。</li>
<li>2）如果一个对象拥有__iter__方法，其是可迭代对象；如果一个对象拥有next方法，其是迭代器。</li>
<li>3）定义可迭代对象，必须实现__iter__方法；定义迭代器，必须实现__iter__和next方法。</li>
</ul>
<p>你也许会问，结论3与结论2是不是有一点矛盾？既然一个对象拥有了next方法就是迭代器，那为什么迭代器必须同时实现两方法呢？</p>
<p>因为结论1，迭代器也是可迭代对象，因此迭代器必须也实现__iter__方法。</p>
<p><strong>介绍一下上面涉及到的两个方法：</strong></p>
<p>1）<strong>iter</strong>()</p>
<p>该方法返回的是当前对象的迭代器类的实例。因为可迭代对象与迭代器都要实现这个方法，因此有以下两种写法。</p>
<p>写法一：用于可迭代对象类的写法，返回该可迭代对象的迭代器类的实例。</p>
<p>写法二：用于迭代器类的写法，直接返回self（即自己本身），表示自身即是自己的迭代器。</p>
<p>也许有点晕，没关系，下面会给出两写法的例子，我们结合具体例子看。</p>
<p>2）next()<br>
返回迭代的每一步，实现该方法时注意要最后超出边界要抛出StopIteration异常。</p>
<p>下面举个可迭代对象与迭代器的例子：</p>
<pre><code class="language-python">[python] view plain copy
#!/usr/bin/env python  
# coding=utf-8  
  
  
class MyList(object):            # 定义可迭代对象类  
  
    def __init__(self, num):  
        self.data = num          # 上边界  
  
    def __iter__(self):  
        return MyListIterator(self.data)  # 返回该可迭代对象的迭代器类的实例  
  
  
class MyListIterator(object):    # 定义迭代器类，其是MyList可迭代对象的迭代器类  
  
    def __init__(self, data):  
        self.data = data         # 上边界  
        self.now = 0             # 当前迭代值，初始为0  
  
    def __iter__(self):  
        return self              # 返回该对象的迭代器类的实例；因为自己就是迭代器，所以返回self  
  
    def next(self):              # 迭代器类必须实现的方法  
        while self.now &lt; self.data:  
            self.now += 1  
            return self.now - 1  # 返回当前迭代值  
        raise StopIteration      # 超出上边界，抛出异常  
  
  
my_list = MyList(5)              # 得到一个可迭代对象  
print type(my_list)              # 返回该对象的类型  
  
my_list_iter = iter(my_list)     # 得到该对象的迭代器实例，iter函数在下面会详细解释  
print type(my_list_iter)  
  
  
for i in my_list:                # 迭代  
    print i  
</code></pre>
<p>运行结果：<br>
<img src="http://picture.totoro.site/images/2019/08/26/20180602164211_226.png" alt="20180602164211_226.png"></p>
<p>问题：上面的例子中出现了iter函数，这是什么东西？和__iter__方法有关系吗？<br>
其实该函数与迭代是息息相关的，通过在Python命令行中打印“help(iter)”得知其有以下两种用法。</p>
<p>用法一：iter(callable, sentinel)<br>
不停的调用callable，直至其的返回值等于sentinel。其中的callable可以是函数，方法或实现了__call__方法的实例。</p>
<p>用法二：iter(collection)<br>
1）用于返回collection对象的迭代器实例，这里的collection我认为表示的是可迭代对象，即该对象必须实现__iter__方法；事实上iter函数与__iter__方法联系非常紧密，iter()是直接调用该对象的__iter__()，并把__iter__()的返回结果作为自己的返回值，故该用法常被称为“创建迭代器”。<br>
2）iter函数可以显示调用，或当执行“for i in obj:”，Python解释器会在第一次迭代时自动调用iter(obj)，之后的迭代会调用迭代器的next方法，for语句会自动处理最后抛出的StopIteration异常。</p>
<p>通过上面的例子，相信对可迭代对象与迭代器有了更具体的认识，那么生成器与它们有什么关系呢？下面简单谈一谈</p>
<p>###<strong>生成器</strong></p>
<p>生成器是一种特殊的迭代器，生成器自动实现了“迭代器协议”（即__iter__和next方法），不需要再手动实现两方法。</p>
<p>生成器在迭代的过程中可以改变当前迭代值，而修改普通迭代器的当前迭代值往往会发生异常，影响程序的执行。</p>
<pre><code class="language-python">for c1 in c:
    print(c1+=2)
</code></pre>
<p><img src="http://picture.totoro.site/images/2019/08/26/20180602164347_746.png" alt="20180602164347_746.png"></p>
<p>看一个生成器的例子：</p>
<pre><code class="language-python">[python] view plain copy
#!/usr/bin/env python  
# coding=utf-8  
  
  
def myList(num):      # 定义生成器  
    now = 0           # 当前迭代值，初始为0  
    while now &lt; num:  
        val = (yield now)                      # 返回当前迭代值，并接受可能的send发送值；yield在下面会解释  
        now = now + 1 if val is None else val  # val为None，迭代值自增1，否则重新设定当前迭代值为val  
  
my_list = myList(5)   # 得到一个生成器对象  
  
print my_list.next()  # 返回当前迭代值  
print my_list.next()  
  
my_list.send(3)       # 重新设定当前的迭代值  
print my_list.next()  
  
print dir(my_list)    # 返回该对象所拥有的方法名，可以看到__iter__与next在其中 
</code></pre>
<p>运行结果：<br>
<img src="http://picture.totoro.site/images/2019/08/26/20180602164437_60.png" alt="20180602164437_60.png"></p>
<p>具有yield关键字的函数都是生成器，yield可以理解为return，返回后面的值给调用者。不同的是return返回后，函数会释放，而生成器则不会。在直接调用next方法或用for语句进行下一次迭代时，生成器会从yield下一句开始执行，直至遇到下一个yield。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[flask全局404装饰器（全局以及蓝图）]]></title>
        <id>https://skytotwo.github.io//post/flask-404-decorator</id>
        <link href="https://skytotwo.github.io//post/flask-404-decorator">
        </link>
        <updated>2019-08-26T08:25:56.000Z</updated>
        <summary type="html"><![CDATA[<p>在flask里是可以实现全局事件注册的，利用装饰器来注册相应的事件，比如404错误，数据库错误等，当错误出现就会捕获走对应的逻辑，很方便。</p>
]]></summary>
        <content type="html"><![CDATA[<p>在flask里是可以实现全局事件注册的，利用装饰器来注册相应的事件，比如404错误，数据库错误等，当错误出现就会捕获走对应的逻辑，很方便。</p>
<!-- more --> 
<pre><code class="language-python">#全局
@app.errorhandler(404)
def page_not_found(error):
    &quot;&quot;&quot;
    404
    &quot;&quot;&quot;
    return render_template(&quot;home/404.html&quot;), 404

#蓝图，注册范围为本蓝图
@web.errorhandler(404)
def page_not_found(error):
    &quot;&quot;&quot;
    404
    &quot;&quot;&quot;
    return render_template(&quot;home/404.html&quot;), 404

#蓝图，注册范围为全局
@web.app_errorhandler(404)
def page_not_found(error):
    &quot;&quot;&quot;
    404
    &quot;&quot;&quot;
    return render_template(&quot;home/404.html&quot;), 404
</code></pre>
<p>注意：</p>
<ul>
<li>核心对象加载的错误处理装饰器，全局的直接是@app.errorhandler(404)</li>
<li>蓝图的加载错误处理装饰器：
<ol>
<li>蓝图名.errorhandler(404)，表示在该蓝图范围中的错误才能触发处理程序</li>
<li>蓝图名.app_errorhandler(404)，表示注册为程序全局的错误处理程序</li>
</ol>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于Flask的蓝图解释一二]]></title>
        <id>https://skytotwo.github.io//post/flask-blueprint</id>
        <link href="https://skytotwo.github.io//post/flask-blueprint">
        </link>
        <updated>2019-08-26T08:23:37.000Z</updated>
        <summary type="html"><![CDATA[<p>以下是一个最基本的蓝图示例。在这里，我们将使用蓝图来简单地渲染静态模板:</p>
]]></summary>
        <content type="html"><![CDATA[<p>以下是一个最基本的蓝图示例。在这里，我们将使用蓝图来简单地渲染静态模板:</p>
<!-- more -->
<pre><code class="language-python">from flask import Blueprint, render_template, abort
from jinja2 import TemplateNotFound

simple_page = Blueprint('simple_page', __name__,
                        template_folder='templates')

from app.feedback import feedback #视图
</code></pre>
<pre><code class="language-python">#视图部分 feedback.py
from . import simple_page

@simple_page.route('/', defaults={'page': 'index'})
@simple_page.route('/&lt;page&gt;')
def show(page):
    try:
        return render_template('pages/%s.html' % page)
    except TemplateNotFound:
        abort(404)
</code></pre>
<p>当你使用 @simple_page.route 装饰器绑定一个函数时，蓝图会记录下所登记的 show 函数。当以后在应用中注册蓝图时，这个函数会被注册到应用中。另外，它 会把构建 Blueprint 时所使用的名称（在本例为 simple_page ）作 为函数端点的前缀。</p>
<pre><code class="language-python">可以这样注册蓝图:

from flask import Flask
from yourapplication.simple_page import simple_page

app = Flask(__name__)
app.register_blueprint(simple_page)
以下是注册蓝图后形成的规则:

[&lt;Rule '/static/&lt;filename&gt;' (HEAD, OPTIONS, GET) -&gt; static&gt;,
 &lt;Rule '/&lt;page&gt;' (HEAD, OPTIONS, GET) -&gt; simple_page.show&gt;,
 &lt;Rule '/' (HEAD, OPTIONS, GET) -&gt; simple_page.show&gt;]
</code></pre>
<p>所以当外部访问到对应url规则时，会直接找到指定蓝图下的方法。也就是定义蓝图下引入视图的意义，会直接在那里找对应方法。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[谈谈python中的深拷贝和浅拷贝]]></title>
        <id>https://skytotwo.github.io//post/python-copy</id>
        <link href="https://skytotwo.github.io//post/python-copy">
        </link>
        <updated>2019-08-26T08:19:53.000Z</updated>
        <summary type="html"><![CDATA[<p>原文链接：谈谈python中的深拷贝和浅拷贝<a href="https://www.jianshu.com/p/efa9dd51f5cc">https://www.jianshu.com/p/efa9dd51f5cc</a></p>
<p>最近面试被问到python中深拷贝和浅拷贝的知识<br>
这里进行下总结，以便今后复习<br>
python中的深拷贝和浅拷贝和java里面的概念是一样的，所谓浅拷贝就是对引用的拷贝，所谓深拷贝就是对对象的资源的拷贝。</p>
]]></summary>
        <content type="html"><![CDATA[<p>原文链接：谈谈python中的深拷贝和浅拷贝<a href="https://www.jianshu.com/p/efa9dd51f5cc">https://www.jianshu.com/p/efa9dd51f5cc</a></p>
<p>最近面试被问到python中深拷贝和浅拷贝的知识<br>
这里进行下总结，以便今后复习<br>
python中的深拷贝和浅拷贝和java里面的概念是一样的，所谓浅拷贝就是对引用的拷贝，所谓深拷贝就是对对象的资源的拷贝。</p>
 <!-- more -->
<p><strong>首先，对赋值操作我们要有以下认识：</strong></p>
<ol>
<li>赋值是将一个对象的地址赋值给一个变量，让变量指向该地址（ 旧瓶装旧酒 ）。</li>
<li>修改不可变对象（str、tuple）需要开辟新的空间</li>
<li>修改可变对象（list等）不需要开辟新的空间<br>
浅拷贝仅仅复制了容器中元素的地址</li>
</ol>
<pre><code class="language-python">&gt;&gt;&gt; a=['hello',[1,2,3]]
&gt;&gt;&gt; b=a[:]
&gt;&gt;&gt; [id(x) for x in a]
[55792504, 6444104]
&gt;&gt;&gt; [id(x) for x in b]
[55792504, 6444104]
&gt;&gt;&gt; a[0]='world'
&gt;&gt;&gt; a[1].append(4)
&gt;&gt;&gt; print(a)
['world', [1, 2, 3, 4]]
&gt;&gt;&gt; print(b)
['hello', [1, 2, 3, 4]]
</code></pre>
<p>这里可以看出，未修改前，a和b中元素的地址都是相同的，不可变的hello<br>
和可变的list地址都一样，说明浅拷贝知识将容器内的元素的地址复制了一份。这可以通过修改后，b中字符串没改变，但是list元素随着a相应改变得到验证。</p>
<ul>
<li>浅拷贝是在另一块地址中创建一个新的变量或容器，但是容器内的元素的地址均是源对象的元素的地址的拷贝。也就是说新的容器中指向了旧的元素（ 新瓶装旧酒 ）。</li>
</ul>
<p>深拷贝，完全拷贝了一个副本，容器内部元素地址都不一样</p>
<pre><code class="language-python">&gt;&gt;&gt; from copy import deepcopy
&gt;&gt;&gt; a=['hello',[1,2,3]]
&gt;&gt;&gt; b=deepcopy(a)
&gt;&gt;&gt; [id(x) for x in a]
[55792504, 55645000]
&gt;&gt;&gt; [id(x) for x in b]
[55792504, 58338824]
&gt;&gt;&gt; a[0]='world'
&gt;&gt;&gt; a[1].append(4)
&gt;&gt;&gt; 
&gt;&gt;&gt; print(a)
['world', [1, 2, 3, 4]]
&gt;&gt;&gt; print(b)
['hello', [1, 2, 3]]
</code></pre>
<p>这里可以看出，深拷贝后，a和b的地址以及a和b中的元素地址均不同，这是完全拷贝的一个副本，修改a后，发现b没有发生任何改变，因为b是一个完全的副本，元素地址与a均不同，a修改不影响b。</p>
<ul>
<li>深拷贝是在另一块地址中创建一个新的变量或容器，同时容器内的元素的地址也是新开辟的，仅仅是值相同而已，是完全的副本。也就是说（ 新瓶装新酒 ）。</li>
</ul>
]]></content>
    </entry>
</feed>